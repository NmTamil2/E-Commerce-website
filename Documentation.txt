1.create folder for e-com-website

2.check python version (python --version)

3.pip install pipenv (install virtual environent)

4.activate virtual environment (pipenv shell)

5.pip install django

6.create project (django-admin startproject Ecomm_Project .)

7.view-->command palette(ctr+shit+p) --> select python interprter --. ecommerce virtual environment

8.run the project( py manage.py runserver)

9.connecting MySQL database with django
    --pip install mysqlclient
    --MySQL workbench --> create databae(CREATE DATABASE mydb;)
    --settings.py --> DATABASES = {
                        'default': {
                        'ENGINE': 'django.db.backends.mysql',
                        'NAME': 'mydb',
                        'USER': 'root',
                        'PASSWORD': 'Tamil@123',
                        'HOST':'localhost',
                        'PORT':'3306',
                        }
                        }

10.run the project(py manage.py runserver)

11.create application (py manage.py startapp shop)

12.mention 'shop' in settings.py--> INSTALLED_APPS
        -- INSTALLED_APPS = [
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'shop',
        ]

13.create urls.py file on shop folder, and include it on project level urls.py
        --project urls.py 
        from django.contrib import admin
        from django.urls import path,include

        urlpatterns = [
            path('admin/', admin.site.urls),
            path('', include('shop.urls')),
        ]
        
        --shop urls.py
        from django.contrib import admin
        from django.urls import path

        urlpatterns = [
            path(),
        ]

14.Create 'templates' folder on shop folder. again create newfolder on templates and name it 'shop'.next create index.html 

15.create view for home page.

     --open views.py
     from django.shortcuts import render

    # Create your views here.
    def home(request):
        return render(request,'shop/index.html')

    -- open urls.py (shop folder)
    from django.contrib import admin
    from django.urls import path
    from shop import views 

    urlpatterns = [
        path('home/',views.home, name ='home'),
    ]

    -- index.html file,

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Home</title>
    </head>
    <body>
        <h1>Home Page</h1>
    </body>
    </html>

16.py manage.py runserver

17. create another view 'register' and register.html also for rendering.

    --views.py

    from django.shortcuts import render

    # Create your views here.
    def home(request):
        return render(request,'shop/index.html')

    def register(request):
        return render(request, 'shop/register.html')


    -- urls.py (shop folder)

    from django.contrib import admin
    from django.urls import path
    from shop import views 

    urlpatterns = [
        path('home/',views.home, name ='home'),
        path('register/',views.register, name ='register'),
    ]

    -- register.html file

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Register</title>
    </head>
    <body>
        <h1>Registration page</h1>
    </body>
    </html>

18.google --> BOOTSTRAP 5 -->Introduction Â· Bootstrap v5.0 --> docs --> copy templates (hello world template)

19. create 'layouts' folder on templates/shop folder. inside layouts, create 'main.html'

        -- main.html

            <!doctype html>
        <html lang="en">
        <head>
            <!-- Required meta tags -->
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">

            <!-- Bootstrap CSS -->
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

            <title>BuySpot | Online Shopping</title>
        </head>
        <body>

            {% block content%}
            {% endblock content%}

            {% block scripts %}
            {% endblock scripts %}

            <!-- Optional JavaScript; choose one of the two! -->

            <!-- Option 1: Bootstrap Bundle with Popper -->
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

            <!-- Option 2: Separate Popper and Bootstrap JS -->
            <!--
            <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
            -->
        </body>
        </html>

20. extend block content from main.html to all others, such as index.html, register.html with the help of {% extends 'shop/layouts/main.html' %}

    -- index.html file,

    {% extends 'shop/layouts/main.html' %}

    {% block content%}
    <h1>Home Page</h1>
    {% endblock content%}

    -- register.html file,

    {% extends 'shop/layouts/main.html' %}

    {% block content%}
    <h1>Register Page</h1>
    {% endblock content%}

21. To change <title> of index and register,

        -- index.html,
        {% extends 'shop/layouts/main.html' %}

        {% block title %}
        BuySpot | Online Shopping
        {% endblock title %}

        {% block content%}
        <h1>Home Page</h1>
        {% endblock content%}


        --register.html
        {% extends 'shop/layouts/main.html' %}

        {% block title %}
        Register | BuySpot
        {% endblock title %}

        {% block content%}
        <h1>Home Page</h1>
        {% endblock content%}


#29:00 minutes completed.......

22.Creating Navigation bar Using boostrap 5
   -- create folder 'inc' (include) on templates/shop .
   -- create 'navbar.html' in inc folder
   -- bootstrap 5 --> docs --> navbar --> copy templates --> paste on navbar.html

   --navbar.html file,

   <nav class="navbar navbar-expand-lg navbar-light bg-light">
  <div class="container-fluid">
    <a class="navbar-brand" href="#">BuySpot</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav">
        <li class="nav-item">
          <a class="nav-link" aria-current="page" href="#">Home</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#">Features</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#">Pricing</a>
        </li>
        
        </li>
      </ul>
    </div>
  </div>
</nav>

23. connect this navbar.html with main.html using {% include 'shop/inc/navbar.html' %}

     --main.html file,

        <!doctype html>
    <html lang="en">
    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Bootstrap CSS -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

        <title>

            {% block title %}
            {% endblock title %}

        </title>
    </head>
    <body>
        {% include 'shop/inc/navbar.html' %}

        {% block content%}
        {% endblock content%}

        {% block scripts %}
        {% endblock scripts %}

        <!-- Optional JavaScript; choose one of the two! -->

        <!-- Option 1: Bootstrap Bundle with Popper -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

        <!-- Option 2: Separate Popper and Bootstrap JS -->
        <!--
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
        -->
    </body>
    </html>

24.by converting navbar div tag from 'container-fluid' (<div class="container-fluid">)
 to 'container' (<div class="container">) , the navbar <nav> tag moves to center. 

    -- navbar.html file,

    <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container">
      <a class="navbar-brand" href="#">BuySpot</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" aria-current="page" href="#">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Features</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Pricing</a>
          </li>
          
        </ul>
      </div>
    </div>
  </nav>


 25.To move <ul> tags right side from left.
   --  <ul class="navbar-nav ">  to <ul class="navbar-nav ms-auto"> 

   -- navbar.html file,

   <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container">
      <a class="navbar-brand" href="#">BuySpot</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item">
            <a class="nav-link" aria-current="page" href="#">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Features</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Pricing</a>
          </li>
          
        </ul>
      </div>
    </div>
  </nav>

  25. To make navbar 'Dark', and top fixed,
        -- convert <nav class="navbar navbar-expand-lg navbar-light bg-light"> to <nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
        navbar.html file,

        <nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
    <div class="container">
      <a class="navbar-brand" href="#">BuySpot</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item">
            <a class="nav-link" aria-current="page" href="#">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Features</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Pricing</a>
          </li>
          
        </ul>
      </div>
    </div>
  </nav>

  26. put index.html content on <div></div> tag
    -- index.html file,
    {% extends 'shop/layouts/main.html' %}

    {% block title %}
    BuySpot | Online Shopping
    {% endblock title %}

    {% block content%}
    <div class="container" style="margin-top: 70px;">
        <div class="row">
            <div class="col-12"><h1>Home Page</h1></div>

    
        
        </div>
    </div>
    {% endblock content%}

    
27.put register.html content on <div></div> tag
    -- register.html file,

    {% extends 'shop/layouts/main.html' %}

    {% block title %}
    Register | BuySpot
    {% endblock title %}

    {% block content%}
    <div class="container" style="margin-top: 70px;"><h1>Register page</h1></div>

    {% endblock content%}


28.creating folder to store media files such as images, audios...
      --Create 'static' folder on E commerce website(outside of project and app folders) and map it on settings.py
      -- STATIC_URL = 'static/'
         MEDIA_URL = '/images/'
         MEDIA_ROOT = 'BASE_DIR/static'


29.Create Database Model using shop/models.py file.

      -- models.py
      from django.db import models
import datetime
import os

def getFileName(request,filename):
    now_time = datetime.datetime.now().strftime("%Y%m%d%H:%M:%S")
    new_filename = "%s%s"%(now_time,filename)
    return os.path.join('uploads/',new_filename)

class Category(models.Model):
    name = models.CharField(max_length=150, blank=False, null=False)
    image = models.ImageField(upload_to = getFileName,blank=True, null=True)
    description = models.TextField(max_length=150, blank=False, null=False)
    status = models.BooleanField(default=False, help_text="0-show, 1-Hideen")
    created_at = models.DateTimeField(auto_now_add=True)

def __str__(self):
    return self.name

class Product(models.Model):
    Catagory = models.ForeignKey(Category,on_delete=models.CASCADE)
    name = models.CharField(max_length=150, blank=False, null=False)
    vendor = models.CharField(max_length=150, blank=False, null=False)
    product_image = models.ImageField(upload_to = getFileName,blank=True, null=True)
    original_price = models.FloatField(null=False, blank=False)
    selling_price = models.FloatField(null=False, blank=False)
    description = models.TextField(max_length=150, blank=False, null=False)
    status = models.BooleanField(default=False, help_text="0-show, 1-Hideen")
    Trending = models.BooleanField(default=False, help_text="0-default, 1-Trending")
    created_at = models.DateTimeField(auto_now_add=True)

def __str__(self):
    return self.name

30. Commands to reflect the data's created on models.py on MySQL Database management system.
    -- py manage.py makemigrations
    -- py manage.py migrate

31. check the tables created or not on MySQL Workbench. 

32. create 'superuser' to access django-admin interface.
    -- py manage.py createsuperuser
        Username (leave blank to use 'thgan'): admin
        Email address: admin@gamail.com
        Password: 1234
        Password (again): 1234
        This password is too short. It must contain at least 8 characters.
        This password is too common.
        This password is entirely numeric.
        Bypass password validation and create user anyway? [y/N]: y
        Superuser created successfully.

33.Register your models created on models.py on admin.py

    from django.contrib import admin
    from shop.models import *
      
    admin.site.register(Category)
    admin.site.register(Product)

34. Create category and products in djangoadmin page.
example : category - Mobiles
          product - realme 5 pro
          category - Fasion
          product - 
          category - Electronics
          product - Television
          category - Grocery
          product - 
          category - Home
          product - 
          note: add more products . then only webpage looks good. more than 90 products.

35.changing background theme of django-admin page
   -- pip install django-jazzmin
   Successfully installed django-jazzmin-3.0.0

   -- add jazzmin in settings.py, installled apps....
    INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'shop',
]
    -- py manage.py runserver

36.Now, going to display database items on webpage.
      -- create 'images' folder on static folder.
      -- download any 6 images from online and place it on static/images folder.
      -- search 'slider'(carousel) in bootstrap 5. take any carousel as per your wish. (slider-carousel: both are same)
      -- create new file called 'slider.html' in inc folder. and include it on index.html.(above block content)
      -- add STATICFILES_DIRS = [BASE_DIR/'static'] on settings.py
      -- add {%load static%} on top of slider.html before adding images.
      -- add images like {% static 'images/1.jpg' %},{% static 'images/2.jpg' %},{% static 'images/3.jpg' %},{% static 'images/4.jpg' %}
      -- add alt="Slide 1", alt="Slide 2", alt="Slide 3", alt="Slide 4"
      -- note : "by-default slider 1 will be on active"
      
      -- slider.html,


      {% load static %}

          <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
              <div class="carousel-indicators">
                <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
                <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
                <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
                <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="3" aria-label="Slide 3"></button>
              </div>
              <div class="carousel-inner">
                <div class="carousel-item active">
                  <img src="{% static 'images/1.jpg' %}" class="d-block w-100" alt="Slide 1">
                </div>
                <div class="carousel-item">
                  <img src="{% static 'images/2.jpeg' %}" class="d-block w-100" alt="Slide 2">
                </div>
                <div class="carousel-item">
                  <img src="{% static 'images/3.jpeg' %}" class="d-block w-100" alt="Slide 3">
                </div>
                <div class="carousel-item">
                  <img src="{% static 'images/4.png' %}" class="d-block w-100" alt="Slide 4">
                </div>
              </div>
              <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
              </button>
              <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
              </button>
            </div>

37. next, load slider.html on index.html page using {% include %}. ( within {% block content%} )
    -- index.html,
          {% extends 'shop/layouts/main.html' %}

      {% block title %}
      BuySpot | Online Shopping
      {% endblock title %}

      {% block content%}
      {% include 'shop/inc/slider.html' %}    # included here.....
      <div class="container" style="margin-top: 70px;">
          <div class="row">
              <div class="col-12"><h1>Home Page</h1></div> 
          </div>
      </div>
      {% endblock content%}

38. py manage.py runserver

#1:10:00 completed........

39. Reduce the size of slider.(image size using css)
    -- create new folder on static folder and name it as 'css'.
    -- create 'style.css' file on css folder.
    -- style.css file,
    .carousel-item img{
    object-fit: cover;      /*Ensures the content fills the container, cropping to maintain aspect ratio.*/
    object-position: top;   /*Aligns the content to the top of the container.*/
    height: 60vh;           /*Sets the container's height to 60% of the viewport height.*/
    overflow: hidden;       /*Hides content that overflows the container's bounds.*/
    }

40.load style.css file on main.html file.
    -- put {% load static %} on top of main.html file
    -- link rel = "stylesheet" href= "{% static 'css/style.css %}
    -- main.html file,

    {% load static %}

<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

    <title>

        {% block title %}
        {% endblock title %}

    </title>
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
  </head>
  <body>
    {% include 'shop/inc/navbar.html' %}

    {% block content %}
    {% endblock content %}

    {% block scripts %}
    {% endblock scripts %}

    <!-- Optional JavaScript; choose one of the two! -->

    <!-- Option 1: Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

    <!-- Option 2: Separate Popper and Bootstrap JS -->
    <!--
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
    -->
  </body>
</html>

41. notes:
    -- Just check whether our style.css linked or not by pressing ctrl+u.
    -- you can see the source code for our webpage.
    -- we can change all .html file styles by correcting style.css file.
    -- because style.css file loaded on main.html file.
    -- we know that main,html is parent file for all other .html files , like index.html and register.html.
    -- so, if we do changes on style.css . it reflects to index.html and register.html.

42. Changing font.
    -- go to font.google.com
    -- select noto sans font 300
    -- click import and copy the <style> </style>
    -- paste it on style.css (@import url('https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap');)
    -- set text decoration : none on <a> tag , and font sizw to 14px in <html> tag, on <body> font-family to 'noto sans : sans-seriff.
    -- style.css file,
    
    @import url('https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap');

html{
    font-size: 14px;
}
body{
    font-family: 'Noto sans',sans-serif;
}
a{
    text-decoration: none;
}



.carousel-item img{
    object-fit: cover;      /*Ensures the content fills the container, cropping to maintain aspect ratio.*/
    object-position: top;   /*Aligns the content to the top of the container.*/
    height: 60vh;           /*Sets the container's height to 60% of the viewport height.*/
    overflow: hidden;       /*Hides content that overflows the container's bounds.*/
}  

43. --now,  refresh and see the text size and font changed perfectly.....
    --so if we change something on style.css, it reflects on webpage....

44.Now adding, url links to navbar lists<li>(such as home,pricing,Features)
    -- go to navbar.html and add {% url 'home' %} in href. (<a class="nav-link" aria-current="page" href="{% url 'home' %}">Home</a>)
    -- go to navbar.html and add {% url 'register' %} in href.(<a class="nav-link" href="{% url 'register' %}">Register</a>)
    --{% url 'home' %} paste it on brand <a> tag.(<a class="navbar-brand" href="{% url 'home' %}">BuySpot</a>)
    -- navbar.html,

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
    <div class="container">
      <a class="navbar-brand" href="{% url 'home' %}">BuySpot</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item">
            <a class="nav-link" aria-current="page" href="{% url 'home' %}">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="{% url 'register' %}">Register</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Pricing</a>
          </li>
          
        </ul>
      </div>
    </div>
  </nav>

45. change endpoint "home" to ' ' on urls.py file

    -- urls.py file,

    from django.contrib import admin
from django.urls import path
from shop import views 

urlpatterns = [
    path('',views.home, name ='home'),
    path('register/',views.register, name ='register'),
    
]


46. Now, displaying category's on webpage
    -- Goto navbar.html, change pricing <li> tag to Collections.
    -- add {% url 'collections' %} to href.
    -- navbar.html file,

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
    <div class="container">
      <a class="navbar-brand" href="{% url 'home' %}">BuySpot</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item">
            <a class="nav-link" aria-current="page" href="{% url 'home' %}">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="{% url 'register' %}">Register</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="{% url 'collections' %}">Collections</a>
          </li>
          
        </ul>
      </div>
    </div>
  </nav>


47. write one view to collections on views.py
      -- views.py
from django.shortcuts import render

# Create your views here.
def home(request):
    return render(request,'shop/index.html')

def register(request):
    return render(request, 'shop/register.html')

def collections(request):
    return render(request, 'shop/collections.html')


48.create collections.html file shop/templates/shop folder.   
    -- copy the content in register.html and paste it on collections.html
    -- collections.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
Collections | BuySpot
{% endblock title %}

{% block content%}
<div class="container" style="margin-top: 70px;"><h1>Collections page</h1></div>

{% endblock content%}

49. set the urls for collections.html file on urls.py file.
from django.contrib import admin
from django.urls import path
from shop import views 

urlpatterns = [
    path('',views.home, name ='home'),
    path('register/',views.register, name ='register'),
    path('collections/',views.collections, name ='collections'),
    
]


50.Now im going to display category on webpage through collections function in views.py.
    -- open views.py py and import models.(2 models . 1- Category, 2- product) like this (from shop.models import * )
    -- create category variable on collections funtion (template tag variable)
    -- category = Category.objects.filter(status = 0) # we know that, 0-show, and 1- hidden.
    -- template tag variable passed via dictionary formate only.(return render(request, 'shop/collections.html', {'category':category} ))
    -- views.py file,

from django.shortcuts import render
from shop.models import * 

# Create your views here.
def home(request):
    return render(request,'shop/index.html')

def register(request):
    return render(request, 'shop/register.html')

def collections(request):
    category = Category.objects.filter(status = 0)
    return render(request, 'shop/collections.html', {'category':category} )

51.pass the 'key' given in template tag variable on collections.html.
displays everything on objects

{% extends 'shop/layouts/main.html' %}

{% block title %}
Collections | BuySpot
{% endblock title %}

{% block content%}
<div class="container" style="margin-top: 70px;"><h1>Collections page</h1>
{{category}}
</div>


{% endblock content%}

52.py manage.py runserver
displays everything on objects. 
<QuerySet [<Category: Category object (1)>, <Category: Category object (2)>, <Category: Category object (3)>, <Category: Category object (4)>]>
we dont want this.

53. remove everything available on collections.html {% block content%} except style="margin-top: 70px;"

-- collections.py file, (not explained. tutor just pasted this bootstrap code...)
{% extends 'shop/layouts/main.html' %}

{% block title %}
Collections | BuySpot
{% endblock title %}

{% block content%}
<section class ='py-5 text-center container' style="margin-top: 70px;">
    <div class="row py-lg-5">
        <div class="col-lg-6 col-md-8 mx-auto">
            <h1 class="fw-light">Bestsellers</h1>
            <p class="lead text-muted">Our most popular products based on sales.</p>
            <p>
                <a href="#" class="btn btn-primary my-2">Already User</a>
                <a href="#" class="btn btn-secondary my-2">Register</a>
            </p>

        </div>
    </div>
</section> 


{% endblock content%}


54. category tab creation using boostrap5 in collections.html,

      -- open section tag set bg-light, py-4, my-5. padding y axis(py), margin y axis(my)
      -- open div tag. class name container
      -- again open one div tag with class name row.
      -- again open one div tag with class name col-12.
      -- within that col-12 , open one h4 tag with class "mb-3". and name Categories.
      -- create hr tag (<hr style="border-color: b8bfc2;">)
      save it.

      --collections.html file,

      {% extends 'shop/layouts/main.html' %}

{% block title %}
Collections | BuySpot
{% endblock title %}

{% block content%}
<section class ='py-5 text-center container' style="margin-top: 70px;">
    <div class="row py-lg-5">
        <div class="col-lg-6 col-md-8 mx-auto">
            <h1 class="fw-light">Bestsellers</h1>
            <p class="lead text-muted">Our most popular products based on sales.</p>
            <p>
                <a href="#" class="btn btn-primary my-2">Already User</a>
                <a href="#" class="btn btn-secondary my-2">Register</a>
            </p>

        </div>
    </div>
</section> 

<section class="bg-light py-4 my-5">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Categories</h4>
                <hr style="border-color: b8bfc2;">

            </div>
        </div>

    </div>

</section>


{% endblock content%}

    

55. Creating 'card' for each category.
    --  create one div tag under the hr tag. and give a class name as 'col' set md-4 and lg-3.
    -- create another div with class name 'card' and my-3.
    -- add one img tag inside that card div with class card-image-top and alt=Catagories.
    -- create div under img tag with class name of card-body.
    -- inside that card-body tag, create one h5 tag and <p> tag and <a> tag
    -- in h5 tag class name "card-title-primary".and content, Product Name.
    -- in <p> tag class name "card-text"(description of product). and content, HTML Stand For HyperText Markup Language
    -- in <a> tag with class name "btn btn-primary btn-sm" and content is View Details.
    save it.

    -- collections.html file,

    {% extends 'shop/layouts/main.html' %}

{% block title %}
Collections | BuySpot
{% endblock title %}

{% block content%}
<section class ='py-5 text-center container' style="margin-top: 70px;">
    <div class="row py-lg-5">
        <div class="col-lg-6 col-md-8 mx-auto">
            <h1 class="fw-light">Bestsellers</h1>
            <p class="lead text-muted">Our most popular products based on sales.</p>
            <p>
                <a href="#" class="btn btn-primary my-2">Already User</a>
                <a href="#" class="btn btn-secondary my-2">Register</a>
            </p>

        </div>
    </div>
</section> 

<section class="bg-light py-4 my-5">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Categories</h4>
                <hr style="border-color: b8bfc2;">

                <div class="col-md-4 col-lg-3">
                    <div class="card my-3">
                        <img src="" class='card-image-top' alt="Categories">
                        <div class="card-body">
                            <h5 class="card-title-primary">Product Name</h5>
                            <p class="card-text">HTML Stand For HyperText Markup Language</p>
                            <a href="" class="btn btn-primary btn-sm">View Details</a>
                        </div>

                    </div>


                </div>
            </div>
        </div>

    </div>

</section>


{% endblock content%}


56. after the above step, images not appeared. just alt=Categories only displayed on webpage.
    now rectifying it.

    -- go to project urls.py.
    -- import 'settings' from django.conf and import 'static' from django.conf.urls.static
    -- add MEDIA_URL and MEDIA_ROOT in urlpatterns variable. (not properly explained by tutor)

    urls.py (project folder),

from django.contrib import admin
from django.urls import path,include

from django.conf import settings 
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('shop.urls')),
]

if settings.DEBUG:
    urlpatterns+=static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)

57. add for loop just before card div in collections.html.
    -- put url @ img sr='{{ item.image.url }}'
    -- replace Product Name by {{item.name}}
    -- replace HTML Stand For HyperText Markup Language with {{item.description}}
    save and run the server

    collections.html file,

    {% extends 'shop/layouts/main.html' %}

{% block title %}
Collections | BuySpot
{% endblock title %}

{% block content%}
<section class ='py-5 text-center container' style="margin-top: 70px;">
    <div class="row py-lg-5">
        <div class="col-lg-6 col-md-8 mx-auto">
            <h1 class="fw-light">Bestsellers</h1>
            <p class="lead text-muted">Our most popular products based on sales.</p>
            <p>
                <a href="#" class="btn btn-primary my-2">Already User</a>
                <a href="#" class="btn btn-secondary my-2">Register</a>
            </p>

        </div>
    </div>
</section> 

<section class="bg-light py-4 my-5">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Categories</h4>
                <hr style="border-color: b8bfc2;">

                {% for item in category %}
                
                <div class="col-md-4 col-lg-3">
                    <div class="card my-3">
                        <img src="{{ item.images.url }}" class='card-image-top' alt="Categories">
                        <div class="card-body">
                            <h5 class="card-title-primary">{{item.name}}</h5>
                            <p class="card-text">{{item.description}}</p> 
                            <a href="" class="btn btn-primary btn-sm">View Details</a>
                        </div>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>

    </div>

</section>


{% endblock content%}


58. Categories displayed successfully on webpage. but images not displayed.

59.next,Fetching products from category wise..
    -- remove 'View Details' button from collections.html
    -- add <a> tag just before 'card-body' div, and close that <a> tag after 'card-body' </div>
    -- add "{% url 'collections'item.name%}" @ <a> tag href.
    -- add url for 'collections' in urls.py file (application folder), like this (path('collections/<str:name>',views.collectionsview, name ='collections'),)
    -- write view for collectionsview in views.py
    -- create one folder on templates/shop/new folder. folder name 'Products'.
    -- create one new file with the name 'index.html' in products folder.
    -- import 'messages' from django-contrib.
    no proper explanation from tutor,
    views.py,
from django.shortcuts import render, redirect
from shop.models import Category, Product
from django.contrib import messages

# Create your views here.
def home(request):
    return render(request, 'shop/index.html')

def register(request):
    return render(request, 'shop/register.html')

def collections(request):
    category = Category.objects.filter(status=0)
    return render(request, 'shop/collections.html', {'category': category})

def collectionsview(request, name):
    if Category.objects.filter(name=name, status=0):
        products = Product.objects.filter(Catagory__name=name)
        return render(request, 'shop/products/index.html', {'products': products})
    else:
        messages.warning(request, "No Such Category Found")
        return redirect('collections')



  -- urls.py (application folder),


from django.contrib import admin
from django.urls import path
from shop import views 

urlpatterns = [
    path('',views.home, name ='home'),
    path('register/',views.register, name ='register'),
    path('collections/',views.collections, name ='collections'),
    path('collections/<str:name>',views.collectionsview, name ='collections'),
    
]


collections.html file,
{% extends 'shop/layouts/main.html' %}

{% block title %}
Collections | BuySpot
{% endblock title %}

{% block content%}
<section class ='py-5 text-center container' style="margin-top: 70px;">
    <div class="row py-lg-5">
        <div class="col-lg-6 col-md-8 mx-auto">
            <h1 class="fw-light">Bestsellers</h1>
            <p class="lead text-muted">Our most popular products based on sales.</p>
            <p>
                <a href="#" class="btn btn-primary my-2">Already User</a>
                <a href="#" class="btn btn-secondary my-2">Register</a>
            </p>

        </div>
    </div>
</section> 

<section class="bg-light py-4 my-5">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Categories</h4>
                <hr style="border-color: b8bfc2;">

                {% for item in category %}
                
                <div class="col-md-4 col-lg-3">
                    <div class="card my-3 py-5">
                        <img src="{{ item.Image.url }}" class='card-image-top' alt="Categories">

                    <a href=" {% url 'collections' item.name %}" >
                        <div class="card-body">
                            <h5 class="card-title-primary">{{item.name}}</h5>
                            <p class="card-text">{{item.description}}</p>
                        </div>
                    </a>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>

    </div>

</section>


{% endblock content%}

    


60. copy layout/index.html file content and paste it on products/index.html file.
    -- remove content available on {% block content%} to {% endblock content%}
    -- now, expectation is..
        -- if i select mobile category , it should display all products under that category.for that,
        -- create one section with class name of "bg-light py-4 my-5"
        -- create one div with class name of "container"
        -- create one div with class name of "row"
        -- create one div with class name of "col=12" 
        -- create one h4 tag with class name "mb-3" with content "Awsome Product" 
        -- create hr tag like this (<hr style="border-color: b8bfc2;">)
        save and run it.

        -- products/index.html file,
{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Awsome Product</h4>
                <hr style="border-color: b8bfc2;">
            </div>
            {% for item in products %}
                
            <div class="col-md-4 col-lg-3">
                <div class="card my-3">
                    <img src="{{ item.product_name.url }}" class='card-image-top' alt="Categories">

                <a href=" {% url 'collections' item.name %}" >
                    <div class="card-body">
                        <h5 class="card-title-primary">{{item.name}}</h5>
                        <p class="card-text">{{item.description}}</p>
                    </div>
                </a>
                </div>
            </div>
            {% endfor %}
        </div>

    </div>


</section>


{% endblock content%}

   




61.Now im expecting product name on webpage instead of awsome product text.
    -- copy the content from collection.html which is containing for loop and paste it under col-2 </div>.
    -- replace 'products' at the place of category in for loop({% for item in products %})
    -- add image url like name given in models.py (<img src="{{ item.product_image.url }}" class='card-image-top' alt="Categories">)
    -- add name , description .
    -- remove description and add original_price and selling_price over there.
    -- now selling_price, and original_price displayed on webpage. just add some style to it.
    --   <span class ='folat-start'>{{item.original_price}}</span> #alligns left side
         <span class ='folat-end'>{{item.selling_price}}</span> #alligns right side
    -- remove float values  original_price and selling_price .
    -- for that, we have to use | stringformat:'d' in both original_price and selling_price.
        <span class="float-start">{{item.original_price | stringformat:'d'}}</span>
        <span class="float-end">{{item.selling_price | stringformat:'d'}}</span>
        now, float values successfully removed.
    -- add strike over original price. for that add <s></s> tags outside of  original_price.
        <span class="float-start"><s>Rs.{{item.original_price | stringformat:'d'}}</s></span>

    -- products/index.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Awsome Product</h4>
                <hr style="border-color: b8bfc2;">
            </div>
            {% for item in products %}
                
            <div class="col-md-4 col-lg-3">
                <div class="card my-3">
                    <img src="{{ item.product_name.url }}" class='card-image-top' alt="Categories">

                <a href=" {% url 'collections' item.name %}" >
                    <div class="card-body">
                        <h5 class="card-title-primary">{{item.name}}</h5>
                        <p class="card-text">
                            <span class="float-start"><s>Rs.{{item.original_price | stringformat:'d'}}</s></span>
                            <span class="float-end">Rs.{{item.selling_price | stringformat:'d'}}</span>
                            

                        </p>
                    </div>
                </a>
                </div>
            </div>
            {% endfor %}
        </div>

    </div>


</section>


{% endblock content%}

   

    
62. Adding styles individually for selling_price and original_price.
    -- put class name old_price to original_price.
    -- put class name new_price to selling_price.
    <span class="float-start old_price"><s>Rs.{{item.original_price | stringformat:'d'}}</s></span>
    <span class="float-end new_price">Rs.{{item.selling_price | stringformat:'d'}}</span>
    -- Goto static/css/style.css.
    -- first, adding style for old_price.
    -- set font-weight: bold; , color: red;
    -- next, add style for new_price.
    -- set , font-weight: bold; , background-color: green; , color: white;, padding: 2px; ,border-radius: 5px;
    -- sttyle not working.... (worked ater one day)

    -- products/index.html file,
    {% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Awsome Product</h4>
                <hr style="border-color: b8bfc2;">
            </div>
            {% for item in products %}
                
            <div class="col-md-4 col-lg-3">
                <div class="card my-3">
                    <img src="{{ item.product_name.url }}" class='card-image-top' alt="Categories">

                <a href=" {% url 'collections' item.name %}" >
                    <div class="card-body">
                        <h5 class="card-title-primary">{{item.name}}</h5>
                        <p class="card-text">
                            <span class="float-start oldprice"><s>Rs.{{item.original_price | stringformat:'d'}}</s></span>
                            <span class="float-end newprice">Rs.{{item.selling_price | stringformat:'d'}}</span>
                            

                        </p>
                    </div>
                </a>
                </div>
            </div>
            {% endfor %}
        </div>

    </div>


</section>


{% endblock content%}


-- style.css file,

@import url('https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap');

html {
    font-size: 14px;
}

body {
    font-family: 'Noto Sans', sans-serif; /* Ensure consistent capitalization */
}

a {
    text-decoration: none;
}

.carousel-item img {
    object-fit: cover;      /* Ensures the content fills the container, cropping to maintain aspect ratio. */
    object-position: top;   /* Aligns the content to the top of the container. */
    height: 60vh;           /* Sets the container's height to 60% of the viewport height. */
    overflow: hidden;       /* Hides content that overflows the container's bounds. */
}

.oldprice {
    font-weight: bold;
    color: red;
}

.newprice {
    font-weight: bold;
    background-color: green;
    color: white;
    padding: 2px;
    border-radius: 5px;
}


   


63. Replace "Awesome products with " Individual category names. such as mobiles, electronics..
    -- Goto views.py , in collectionsview function, pass {"category":name}  into return render line.
     return render(request, 'shop/products/index.html', {'products': products, "category":name})
    -- Replace 'Awesome' by {{category_name}} in products/index.html and similarly in views.py also.
    <h4 class="mb-3">{{category_name}} Product</h4>
    return render(request, 'shop/products/index.html', {'products': products, "category_name":name})

    -- views.py file,

from django.shortcuts import render, redirect
from shop.models import Category, Product
from django.contrib import messages

# Create your views here.
def home(request):
    return render(request, 'shop/index.html')

def register(request):
    return render(request, 'shop/register.html')

def collections(request):
    category = Category.objects.filter(status=0)
    return render(request, 'shop/collections.html', {'category': category})

def collectionsview(request, name):
    if Category.objects.filter(name=name, status=0).exists():
        products = Product.objects.filter(category__name=name)  # Changed to lowercase
        return render(request, 'shop/products/index.html', {'products': products, "category_name":name})
    else:
        messages.warning(request, "No Such Category Found")
        return redirect('collections')

-- products/index.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">{{category_name}} Product</h4>
                <hr style="border-color: b8bfc2;">
            </div>
            {% for item in products %}
                
            <div class="col-md-4 col-lg-3">
                <div class="card my-3">
                    <img src="{{ item.product_name.url }}" class='card-image-top' alt="Categories">

                <a href=" {% url 'collections' item.name %}" >
                    <div class="card-body">
                        <h5 class="card-title-primary">{{item.name}}</h5>
                        <p class="card-text">
                            <span class="float-start oldprice"><s>Rs.{{item.original_price | stringformat:'d'}}</s></span>
                            <span class="float-end newprice">Rs.{{item.selling_price | stringformat:'d'}}</span>
                            

                        </p>
                    </div>
                </a>
                </div>
            </div>
            {% endfor %}
        </div>

    </div>


</section>


{% endblock content%}

   
64. making template more stylish.
    -- goto font awesome cdn w3schools in google. select first link.
    -- under fomt awesome Introduction/ basic icons/ copy the link rel.
    -- next, goto layout/main.html and paste it within the head tag
    -- main.html file,

{% load static %}

<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

    <title>

        {% block title %}
        {% endblock title %}

    </title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
  </head>
  <body>
    {% include 'shop/inc/navbar.html' %}

    {% block content %}
    {% endblock content %}

    {% block scripts %}
    {% endblock scripts %}

    <!-- Optional JavaScript; choose one of the two! -->

    <!-- Option 1: Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

    <!-- Option 2: Separate Popper and Bootstrap JS -->
    <!--
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
    -->
  </body>
</html>

65. Creating one 'icon' for my navigation bar.
    -- goto inc/navbar.html file, add class = 'fa fa-cart-plus inside of <i></i> tags (it's a font awesome class to add icon) in BuySpot a tag.
    <a class="navbar-brand" href="{% url 'home' %}"> <i class ="fa fa-cart-plus"></i>BuySpot</a>
    -- above step works when internet is connected.
    -- now, add icons to Home,Register, and collections silmilar to the Buyspot.
    -- Home - <i class ="fa fa-home"></i>
    -- Register -<i class ="fa fa-user"></i>
    -- Collections - <i class ="fa fa-cubes"></i>
    -- next, add another <li> with a tag with the name of cart. and add icon using <i class ="fa fa-shopping-Cart"></i>
                
    -- inc/navbar.html file,     

<nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
    <div class="container">
      <a class="navbar-brand" href="{% url 'home' %}"> <i class ="fa fa-cart-plus"></i>BuySpot</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item">
            <a class="nav-link" aria-current="page" href="{% url 'home' %}"><i class="fa fa-home"></i>Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="{% url 'register' %}"> <i class="fa fa-user"></i>Register</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="{% url 'collections' %}"> <i class="fa fa-cubes"></i>Collections</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#"> <i class="fa fa-shopping-cart"></i>Cart</a>
          </li>
          
        </ul>
      </div>
    </div>
  </nav>     


66. create footer for our webpage.
    -- create 'footer.html' file on inc folder.
    -- copy the code from source code and paste it on inc/footer file( not explained properly)
    source : https://www.tutorjoes.in/python_django_blog/index
    -- inc/footer.html file,

<footer class="text-center text-lg-start bg-dark text-white">
    <section class="container d-flex justify-content-center justify-content-lg-between p-4">
      <div class="me-5 d-none d-lg-block">
        <span>Get connected with us on social networks:</span>
      </div>
      <div>
        <a href="" class="me-4 text-reset"><i class="fa fa-facebook"></i></a>
        <a href="" class="me-4 text-reset"><i class="fa fa-twitter"></i></a>
        <a href="" class="me-4 text-reset"><i class="fa fa-google"></i></a>
        <a href="" class="me-4 text-reset"><i class="fa fa-instagram"></i></a>
        <a href="" class="me-4 text-reset"><i class="fa fa-linkedin"></i></a>
        <a href="" class="me-4 text-reset"><i class="fa fa-github"></i></a>
      </div>
    </section>
  
    <section class="">
      <div class="container text-center text-md-start mt-5">
        <div class="row mt-3">
          <div class="col-md-3 col-lg-4 col-xl-3 mx-auto mb-4">
            <h6 class="text-uppercase fw-bold mb-4"><i class="fa fa-cart-plus"></i> ShopKart</h6>
            <p>
              shopkart.com is a one stop destination for your family's fashion needs.
               We give you the opportunity to give your wardrobe a makeover with the latest collections from our top brands.
            </p>
          </div>
  
          <div class="col-md-2 col-lg-2 col-xl-2 mx-auto mb-4">
            <h6 class="text-uppercase fw-bold mb-4">Make Money with Us</h6>
            <p><a href="#!" class="text-reset">Sell on ShopKart</a></p>
            <p><a href="#!" class="text-reset">Advertise Your Products</a></p>
            <p><a href="#!" class="text-reset">Become an Affiliate</a></p>
            <p><a href="#!" class="text-reset">Fulfilment by ShopKart</a></p>
          </div>
          <div class="col-md-3 col-lg-2 col-xl-2 mx-auto mb-4">
            <h6 class="text-uppercase fw-bold mb-4">Useful links</h6>
            <p><a href="#!" class="text-reset">FAQ</a></p>
            <p><a href="#!" class="text-reset">Feedback</a></p>
            <p><a href="#!" class="text-reset">About Us</a></p>
            <p><a href="#!" class="text-reset">Contact Us</a></p>
          </div>
          
          <div class="col-md-4 col-lg-3 col-xl-3 mx-auto mb-md-0 mb-4">
            <h6 class="text-uppercase fw-bold mb-4"> Contact</h6>
            <p><i class="fa fa-home"></i> Tutor Joes</p>
            <p><i class="fa fa-envelope"></i> info@example.com</p>
            <p><i class="fa fa-phone"></i> + 91 9043017689</p>
          </div>
  
        </div>
      </div>
    </section>
    <div class="text-center p-4">
      &copy;  2021 Copyright <a class="text-reset fw-bold" href="https://tutorjoes.in/"> tutorjoes.in</a>
    </div>
  </footer>


67. Include inc/footer.html file in layouts/main.html at the end of body tag.
        -- inc/main.html file,

{% load static %}

<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

    <title>

        {% block title %}
        {% endblock title %}

    </title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
  </head>
  <body>
    {% include 'shop/inc/navbar.html' %}

    {% block content %}
    {% endblock content %}

    {% block scripts %}
    {% endblock scripts %}

    {% include 'shop/inc/footer.html' %}

    <!-- Optional JavaScript; choose one of the two! -->

    <!-- Option 1: Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

    <!-- Option 2: Separate Popper and Bootstrap JS -->
    <!--
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
    -->
  </body>
</html>


68. Next, fetching data from single product. if i click on one product , it will display it's content only.
    -- goto shop/urls.py add one path. 
    path('collections/<str:cname>/<str:pname>',views.product_details, name ='product_details'),
    cname - to display category name, pname- to display product name.
    -- now , create view fo product_details view.
    -- goto views.py file, and create one function with the name of  product_details.
    -- add three parameters request,cname,pname and return HTTPResponse ("Product Deatails")
    def product_details(request,cname,pname):
    return HTTPResponse ("Product Details")
    -- goto product.index.html file, 
    -- replace 'collections' with 'product_details' category_name
    <a href=" {% url 'product_details' category_name item.name %}" >
    -- replace HTTPResponce('Product Deatails) with redirect('collections') in product_details view.
    def product_details(request,cname,pname):
    return redirect('collections')

    --shop/urls.py file,

    """
URL configuration for Ecomm_Project project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path
from shop import views 

urlpatterns = [
    path('',views.home, name ='home'),
    path('register/',views.register, name ='register'),
    path('collections/',views.collections, name ='collections'),
    path('collections/<str:name>',views.collectionsview, name ='collections'),
    path('collections/<str:cname>/<str:pname>',views.product_details, name ='product_details'),
    
]

 -- views.py file,

 from django.shortcuts import render, redirect
from shop.models import Category, Product
from django.contrib import messages
from django.http import HttpResponse

# Create your views here.
def home(request):
    return render(request, 'shop/index.html')

def register(request):
    return render(request, 'shop/register.html')

def collections(request):
    category = Category.objects.filter(status=0)
    return render(request, 'shop/collections.html', {'category': category})

def collectionsview(request, name):
    if Category.objects.filter(name=name, status=0).exists():
        products = Product.objects.filter(category__name=name)  # Changed to lowercase
        return render(request, 'shop/products/index.html', {'products': products, "category_name":name})
    else:
        messages.warning(request, "No Such Category Found")
        return redirect('collections')

def product_details(request,cname,pname):
    return redirect('collections')


 -- product/index.html file,

 {% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">{{category_name}} Product</h4>
                <hr style="border-color: b8bfc2;">
            </div>
            {% for item in products %}
                
            <div class="col-md-4 col-lg-3">
                <div class="card my-3">
                    <img src="{{ item.product_name.url }}" class='card-image-top' alt="Categories">

                <a href=" {% url 'product_details' category_name item.name %}" >
                    <div class="card-body">
                        <h5 class="card-title-primary">{{item.name}}</h5>
                        <p class="card-text">
                            <span class="float-start oldprice"><s>Rs.{{item.original_price | stringformat:'d'}}</s></span>
                            <span class="float-end newprice">Rs.{{item.selling_price | stringformat:'d'}}</span>
                            

                        </p>
                    </div>
                </a>
                </div>
            </div>
            {% endfor %}
        </div>

    </div>


</section>


{% endblock content%}

   
69.create product_deatils.html file on products folder
    -- copy the content in product/index.html and paste it to product/product_deatils.html 
    -- remove for loop content and category_name inside the {{}}
    -- product_details.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">{{}} Product</h4>
                <hr style="border-color: b8bfc2;">
            </div>
            
        </div>

    </div>


</section>


{% endblock content%}

   
70. Goto views.py and add content to product_deatils function.
    -- remove return statement line .
    -- views.py file,

    from django.shortcuts import render, redirect
from shop.models import Category, Product
from django.contrib import messages
from django.http import HttpResponse

# Create your views here.
def home(request):
    return render(request, 'shop/index.html')

def register(request):
    return render(request, 'shop/register.html')

def collections(request):
    category = Category.objects.filter(status=0)
    return render(request, 'shop/collections.html', {'category': category})

def collectionsview(request, name):
    if Category.objects.filter(name=name, status=0).exists():
        products = Product.objects.filter(category__name=name)  # Changed to lowercase
        return render(request, 'shop/products/index.html', {'products': products, "category_name":name})
    else:
        messages.warning(request, "No Such Category Found")
        return redirect('collections')

def product_details(request,cname,pname):
    if(Category.objects.filter(name=cname,status=0)):
        if(Product.objects.filter(name=pname,status=0)):
            product = Product.objects.filter(name=pname,status=0).first()
            return render(request,'shop/products/product_details.html',{'product':product})
        else:
            messages.warning(request, "No Such Product")
            return redirect ('collections')
    else:
        messages.warning(request, "No Such Category")
        return redirect ('collections')

71.Pass {{products}} to product.details.html file,
        --product.details.html file,
        {% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Products</h4>
                <hr style="border-color: b8bfc2;">
            </div>
            {{products}}
        </div>

    </div>


</section>


{% endblock content%}

   
save and run it.

72. after the above step, webpage displays product name while click the individual product.
    -- now let display the complete details of the product while select that product.
    -- add '{{product}} Details' in h4 tag and remove below this {{product}} 
    <h4 class="mb-3">{{product}} Details</h4>
    -- create one div tag with class name "col-3 my-3" under col-12 </div> tag. 
    <div col-4 my-3> <div>
    -- create one img tag with src="{{products.product_name url}}" and class ="card-image-top" alt="products"
    -- save and run. check image displaying on webpage or not ?...
    -- next, create <div col-8 my-3> <div> under the  <div col-4 my-3> <div>
    -- create dummy data for product.
    -- create h5 tah with class "text-success" and content MEN'S SHOES FASHION (<h5 class="text-success ">MEN'S SHOES FASHION</h5>)
    -- create p tag with content <p>Seller Name</p>
    -- create p tag with product description
    -- create <h6 class="my-2"> Current Price:Rs.<s>450</s></h6>
    -- create <h5 class="my-2"> Offer Price:Rs.350</h5>
    -- create div tage for favourites and add to cart.
        <div class="my-3">
            <button class="btn btn-primary"><i class="fa fa-cart"></i>Add to Cart</button>
            <button class="btn btn-danger"><i class="fa fa-heart"></i></button>
        </div>
    -- add style="min-height: 600px;" to section tag, it moves footer for correct height.

    -- product_details.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">{{product}} Details</h4>
                <hr style="border-color: b8bfc2;">
            </div>

            <div col-4 my-3>
                <img src="{{products.product_name.url}}" class="card-image-top" alt="products">
            </div>

            <div class="col-8 my-3">
                <h5 class="text-success ">MEN'S SHOES FASHION</h5>
                <p>Seller Name</p>
                <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Consectetur, saepe! Maxime molestias laboriosam obcaecati sit. Maxime sit libero officia? Excepturi aliquid quia voluptas optio sed quasi eius debitis doloremque error!</p>
                <h6 class="my-2"> Current Price:Rs.<s>450</s></h6>
                <h5 class="my-2"> Offer Price:Rs.350</h5>
                <div class="my-3">
                    <button class="btn btn-primary"><i class="fa fa-cart"></i>Add to Cart</button>
                    <button class="btn btn-danger"><i class="fa fa-heart"></i></button>
                    
                </div>
            </div>
            
        </div>

    </div>


</section>


{% endblock content%}

   
73. Now, Replace the dummy data's with original content.
    -- replace img tag alt with {{products}}. remove products there.
    -- replace MEN'S SHOES FASHION with {{product}} in h5 tag
    -- change Seller Name in p tag with {{product.vendor}}
    -- change description to <p>{{product.description}}</p>
    -- change current price(Rs.450) with {{product.original_price}}
    -- change offer price(Rs.350) with {{product.selling_price}}

    -- product_details.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">{{product.name}} Details</h4>
                <hr style="border-color: b8bfc2;">
            </div>

            <div col-4 my-3>
                <img src="{{product.product_image.url}}" class="card-image-top" alt="{{product.name}}">
            </div>

            <div class="col-8 my-3">
                <h5 class="text-success ">{{product}}</h5>
                <p>{{product.vendor}}</p>
                <p>{{product.description}}</p>
                <h6 class="my-2"> Current Price : Rs.<s>{{product.original_price}}</s></h6>
                <h5 class="my-2"> Offer Price : Rs.{{product.selling_price}}</h5>
                <div class="my-3">
                    <button class="btn btn-primary"><i class="fa fa-cart"></i>Add to Cart</button>
                    <button class="btn btn-danger"><i class="fa fa-heart"></i></button>
                    
                </div>
            </div>
            
        </div>

    </div>


</section>


{% endblock content%}

   

74.To change all products name in Capital. and make some stlye.
    -- <h5 class="text-success ">{{product | upper}} </h5>
    -- "text-danger" to Current price.
    -- "text-primary" to Selling price

    -- product_detail.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">{{product.name}} Details</h4>
                <hr style="border-color: b8bfc2;">
            </div>

            <div col-4 my-3>
                <img src="{{product.product_image.url}}" class="card-image-top" alt="{{product.name}}">
            </div>

            <div class="col-8 my-3">
                <h5 class="text-success ">{{product | upper}} </h5>
                <p>{{product.vendor}}</p>
                <p>{{product.description}}</p>
                <h6 class="my-2 text-danger"> Current Price : Rs.<s>{{product.original_price}}</s></h6>
                <h5 class="my-2 text-primary"> Offer Price : Rs.{{product.selling_price}}</h5>
                <div class="my-3">
                    <button class="btn btn-primary"><i class="fa fa-cart"></i>Add to Cart</button>
                    <button class="btn btn-danger"><i class="fa fa-heart"></i></button>
                    
                </div>
            </div>
            
        </div>

    </div>


</section>


{% endblock content%}

   

75. Now set path(Home/collection/product: like this) to avoid getting back to collections and selecting the products again and again.
    -- for that use bootstrap breadcrumb
    -- goto google --> search : bootstrap --> select first link --> Docs --> Components -->Breadcrumb --> copy template
    -- paste the template in product_deatils.html file. pasting location:below hr tag.
    -- save and run it. works successfully.

    -- product.details.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">{{product.name}} Details</h4>
                <hr style="border-color: b8bfc2;">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                      <li class="breadcrumb-item"><a href="#">Home</a></li>
                      <li class="breadcrumb-item"><a href="#">Library</a></li>
                      <li class="breadcrumb-item active" aria-current="page">Data</li>
                    </ol>
                  </nav>
            </div>

            <div col-4 my-3>
                <img src="{{product.product_image.url}}" class="card-image-top" alt="{{product.name}}">
            </div>

            <div class="col-8 my-3">
                <h5 class="text-success ">{{product | upper}} </h5>
                <p>{{product.vendor}}</p>
                <p>{{product.description}}</p>
                <h6 class="my-2 text-danger"> Current Price : Rs.<s>{{product.original_price}}</s></h6>
                <h5 class="my-2 text-primary"> Offer Price : Rs.{{product.selling_price}}</h5>
                <div class="my-3">
                    <button class="btn btn-primary"><i class="fa fa-cart"></i>Add to Cart</button>
                    <button class="btn btn-danger"><i class="fa fa-heart"></i></button>
                    
                </div>
            </div>
            
        </div>

    </div>


</section>


{% endblock content%}

   
76. Now, change the dummy data from breadcrumb template,
    -- set url for home .
     <li class="breadcrumb-item"><a href="{% url 'home' %}">Home</a></li>
    -- replace Library with Collections.
     <li class="breadcrumb-item"><a href="#">Collections</a></li>
    -- add current product. replace Data with {{product}}
     <li class="breadcrumb-item active" aria-current="page">{{product}}</li>
    -- add url for Collections.
        -- for that, we have to pase 1 parameter.
        -- parameter 1- product category name
        <li class="breadcrumb-item"><a href="{% url 'collections' product.category.name %}">Collections</a></li>

    -- product_details.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">{{product.name}} Details</h4>
                <hr style="border-color: b8bfc2;">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                      <li class="breadcrumb-item"><a href="{% url 'home' %}">Home</a></li>
                      <li class="breadcrumb-item"><a href="{% url 'collections' product.category.name %}">Collections</a></li>
                      <li class="breadcrumb-item active" aria-current="page">{{product}}</li>
                    </ol>
                  </nav>
            </div>

            <div col-4 my-3>
                <img src="{{product.product_image.url}}" class="card-image-top" alt="{{product.name}}">
            </div>

            <div class="col-8 my-3">
                <h5 class="text-success ">{{product | upper}} </h5>
                <p>{{product.vendor}}</p>
                <p>{{product.description}}</p>
                <h6 class="my-2 text-danger"> Current Price : Rs.<s>{{product.original_price}}</s></h6>
                <h5 class="my-2 text-primary"> Offer Price : Rs.{{product.selling_price}}</h5>
                <div class="my-3">
                    <button class="btn btn-primary"><i class="fa fa-cart"></i>Add to Cart</button>
                    <button class="btn btn-danger"><i class="fa fa-heart"></i></button>
                    
                </div>
            </div>
            
        </div>

    </div>


</section>


{% endblock content%}

   
2:10:00 minutes completed........

77. Checking quantity remaining of products.
    -- put 'if condition' for add to cart button , which is available in product_details.html file.
    -- put else if quantity =0, it must return 'Out Of Stock"
        {% if product.quantity >0 %}
       <button class="btn btn-primary"><i class="fa fa-cart"></i>Add to Cart</button>
       {% else %}
        <button class="btn btn-secondary"><i class="fa fa-minus"></i>Out Of Stock</button>
        {% endif %}

    -- change <i class="fa fa-cart"></i> to <i class="fa fa-shopping-cart"></i>
    -- product-details.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">{{product.name}} Details</h4>
                <hr style="border-color: b8bfc2;">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                      <li class="breadcrumb-item"><a href="{% url 'home' %}">Home</a></li>
                      <li class="breadcrumb-item"><a href="{% url 'collections' product.category.name %}">Collections</a></li>
                      <li class="breadcrumb-item active" aria-current="page">{{product}}</li>
                    </ol>
                  </nav>
            </div>

            <div col-4 my-3>
                <img src="{{product.product_image.url}}" class="card-image-top" alt="{{product.name}}">
            </div>

            <div class="col-8 my-3">
                <h5 class="text-success ">{{product | upper}} </h5>
                <p>{{product.vendor}}</p>
                <p>{{product.description}}</p>
                <h6 class="my-2 text-danger"> Current Price : Rs.<s>{{product.original_price}}</s></h6>
                <h5 class="my-2 text-primary"> Offer Price : Rs.{{product.selling_price}}</h5>
                <div class="my-3">
                    {% if product.quantity > 0 %}
                    <button class="btn btn-primary"><i class="fa fa-shopping-cart"></i>Add to Cart</button>
                    {% else %}
                    <button class="btn btn-secondary"><i class="fa fa-minus"></i>Out Of Stock</button>
                    {% endif %}
                    <button class="btn btn-danger"><i class="fa fa-heart"></i></button>
                    
                </div>
            </div>
            
        </div>

    </div>


</section>


{% endblock content%}

   
78. Add the Trending product label .
    -- in product_details.html file, change <div class = "col-4 my-3"> to <div class="col-4 my-3 pic-box">
    -- inside that, create one div tag with class name 'Hot'. <div class="Hot"></div>
    -- now add style for that .pic-box Hot in style.css file.
    -- goto style.css file.
    -- add .pic-box position to relative
    --  .Hot postion is absolute.
    follow the below,
    .pic-box{
    position: relative;
}

.Hot{
    background-color: orangered;
    color: white;
    width: 50px;
    text-align: center;
    font-weight: bold;
    display: inline;
    border-radius: 5px;
    position: absolute;
    top: 0;
    right: 20px;
    z-index: 10;
}

        -- add if condition just above Hot div in product_details.html
        {% if product.Trending %}

        -- product_detail.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">{{product.name}} Details</h4>
                <hr style="border-color: b8bfc2;">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                      <li class="breadcrumb-item"><a href="{% url 'home' %}">Home</a></li>
                      <li class="breadcrumb-item"><a href="{% url 'collections' product.category.name %}">Collections</a></li>
                      <li class="breadcrumb-item active" aria-current="page">{{product}}</li>
                    </ol>
                  </nav>
            </div>

            <div class="col-4 my-3 pic-box">
                {% if product.Trending %}
                <div class="Hot"></div>
                <img src="{{product.product_image.url}}" class="card-image-top" alt="{{product.name}}">
            </div>

            <div class="col-8 my-3">
                <h5 class="text-success ">{{product | upper}} </h5>
                <p>{{product.vendor}}</p>
                <p>{{product.description}}</p>
                <h6 class="my-2 text-danger"> Current Price : Rs.<s>{{product.original_price}}</s></h6>
                <h5 class="my-2 text-primary"> Offer Price : Rs.{{product.selling_price}}</h5>
                <div class="my-3">
                    {% if product.quantity > 0 %}
                    <button class="btn btn-primary"><i class="fa fa-shopping-cart"></i>Add to Cart</button>
                    {% else %}
                    <button class="btn btn-secondary"><i class="fa fa-minus"></i>Out Of Stock</button>
                    {% endif %}
                    <button class="btn btn-danger"><i class="fa fa-heart"></i></button>
                    
                </div>
            </div>
            
        </div>

    </div>


</section>


{% endblock content%}

   
-- style.css file,

@import url('https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap');

html {
    font-size: 14px;
}

body {
    font-family: 'Noto Sans', sans-serif; /* Ensure consistent capitalization */
}

a {
    text-decoration: none;
}

.carousel-item img {
    object-fit: cover;      /* Ensures the content fills the container, cropping to maintain aspect ratio. */
    object-position: top;   /* Aligns the content to the top of the container. */
    height: 60vh;           /* Sets the container's height to 60% of the viewport height. */
    overflow: hidden;       /* Hides content that overflows the container's bounds. */
}

.oldprice {
    font-weight: bold;
    color: red;
}

.newprice {
    font-weight: bold;
    background-color: green;
    color: white;
    padding: 2px;
    border-radius: 5px;
}

.pic-box{
    position: relative;
}

.Hot{
    background-color: orangered;
    color: white;
    width: 50px;
    text-align: center;
    font-weight: bold;
    display: inline;
    border-radius: 5px;
    position: absolute;
    top: 0;
    right: 20px;
    z-index: 10;
}


79. add Trending products to home page.
    -- goto views.py
    -- in home function,  get the Product class from models.py and store in products variable.
    -- get filter(Trending=1)
    product = Product.objects.filter(Trending=1)
    -- add that product variable in return statement inside dictionary.
    return render(request, 'shop/index.html',{'product': product})
    -- go to shop/index.html file,
    -- add {{product}} just below the home page div.
    save and run.

    shop/index.html file, 

    {% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}
{% include 'shop/inc/slider.html' %}
<div class="container" style="margin-top: 70px;">
    <div class="row">
        <div class="col-12"><h1>Home Page</h1></div> 
        {{product}}
    </div>
</div>
{% endblock content%}

-- views.py file,

from django.shortcuts import render, redirect
from shop.models import Category, Product
from django.contrib import messages
from django.http import HttpResponse

# Create your views here.
def home(request):
    product = Product.objects.filter(Trending=1)
    return render(request, 'shop/index.html',{'product': product})

def register(request):
    return render(request, 'shop/register.html')

def collections(request):
    category = Category.objects.filter(status=0)
    return render(request, 'shop/collections.html', {'category': category})

def collectionsview(request, name):
    if Category.objects.filter(name=name, status=0).exists():
        products = Product.objects.filter(category__name=name)  # Changed to lowercase
        return render(request, 'shop/products/index.html', {'products': products, "category_name":name})
    else:
        messages.warning(request, "No Such Category Found")
        return redirect('collections')

def product_details(request,cname,pname):
    if(Category.objects.filter(name=cname,status=0)):
        if(Product.objects.filter(name=pname,status=0)):
            product = Product.objects.filter(name=pname,status=0).first()
            return render(request,'shop/products/product_details.html',{'product':product})
        else:
            messages.warning(request, "No Such Product")
            return redirect ('collections')
    else:
        messages.warning(request, "No Such Category")
        return redirect ('collections')

-- in webpage you can see the objects like below.
<QuerySet [<Product: vivo T3x 5G (Celestial Green, 128 GB) (4 GB RAM)>, <Product: vivo T2x 5G (Marine Blue, 128 GB) (6 GB RAM)>, <Product: realme C65 5G (Feather Green, 128 GB) (6 GB RAM)>, <Product: realme 12x 5G (Woodland Green, 128 GB) (6 GB RAM)>, <Product: UV Protection Retro Square Sunglasses (Free Size) (For Women, Black)>, <Product: HP 2023 Intel Core i3 12th Gen 1215U - (8 GB/SSD/512 GB SSD/Windows 11 Home) 15s-fy5003TU Thin and Light Laptop (15.6 Inch, Natural Silver, 1.69 Kg,>, <Product: Prestige Omega Festival Pack - Build Your Kitchen Induction Bottom Non-Stick Coated Cookware Set (Aluminium, 3 - Piece)>, <Product: Harry Potter - Ron Weasley - Cinematic Guide (English, Hardcover, Felicity Baker)>]>


80. To convert Objects to products.
    -- go to products/index.html file,
    -- copy for loop
    -- paste it on shop/index.html
    -- change "Home Page" to "Latest Offers"

    -- shop/index.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}
{% include 'shop/inc/slider.html' %}
<div class="container" style="margin-top: 70px;">
    <div class="row">
        <div class="col-12"><h1>Latest Offers</h1></div> 

        {% for item in product %}
                
            <div class="col-md-4 col-lg-3">
                <div class="card my-3">
                    <img src="{{ item.product_name.url }}" class='card-image-top' alt="Categories">

                <a href=" " >
                    <div class="card-body">
                        <h5 class="card-title-primary">{{item.name}}</h5>
                        <p class="card-text">
                            <span class="float-start oldprice"><s>Rs.{{item.original_price | stringformat:'d'}}</s></span>
                            <span class="float-end newprice">Rs.{{item.selling_price | stringformat:'d'}}</span>
                            

                        </p>
                    </div>
                </a>
                </div>
            </div>
            {% endfor %}
    </div>
</div>
{% endblock content%}

   
81. now, if i select the product in home page, it should redirected to product details.
   -- To do this, add <a> tag url in shop/index.html file.
   -- we need two parameters. 1- category name 2- product name.
   <a href="{% url 'product_details' item.category.name item.name %}">
   -- shop/index.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}
{% include 'shop/inc/slider.html' %}
<div class="container" style="margin-top: 70px;">
    <div class="row">
        <div class="col-12"><h1>Latest Offers</h1></div> 

        {% for item in products %}
                
        <div class="col-md-4 col-lg-3">
            <div class="card my-3">
                <img src="{{ item.product_name.url }}" class='card-image-top' alt="Categories">

                <a href="{% url 'product_details' item.category.name item.name %}">

                <div class="card-body">
                    <h5 class="card-title-primary">{{item.name}}</h5>
                    <p class="card-text">
                        <span class="float-start oldprice"><s>Rs.{{item.original_price | stringformat:'d'}}</s></span>
                        <span class="float-end newprice">Rs.{{item.selling_price | stringformat:'d'}}</span>
                        

                    </p>
                </div>
            </a>
            </div>
        </div>
        {% endfor %}
    </div>
</div>
{% endblock content%}

   
82. now, change the text "Latest Offers"  in shop/index.html file. (for good look)
     -- go to product_details.html file.
     -- copy h4 and h4 tag , which is in 'col-12' div.
     <h4 class="mb-3">{{product.name}} Details</h4>
     <hr style="border-color: b8bfc2;">
     -- goto shop/index.html file.
     -- replace this <h1>Latest Offers</h1> with that h4 tag and hr tag
     --replace this content in h4 tag '{{product.name}} Details' with 'Latest Offers'.

     -- shop/index.html file,
     {% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}
{% include 'shop/inc/slider.html' %}
<div class="container" style="margin-top: 70px;">
    <div class="row">
        <div class="col-12">
            <h4 class="mb-3">Latest Offers</h4>
            <hr style="border-color: b8bfc2;">
        </div> 

        {% for item in products %}
                
        <div class="col-md-4 col-lg-3">
            <div class="card my-3">
                <img src="{{ item.product_name.url }}" class='card-image-top' alt="Categories">

                <a href="{% url 'product_details' item.category.name item.name %}">

                <div class="card-body">
                    <h5 class="card-title-primary">{{item.name}}</h5>
                    <p class="card-text">
                        <span class="float-start oldprice"><s>Rs.{{item.original_price | stringformat:'d'}}</s></span>
                        <span class="float-end newprice">Rs.{{item.selling_price | stringformat:'d'}}</span>
                        

                    </p>
                </div>
            </a>
            </div>
        </div>
        {% endfor %}
    </div>
</div>
{% endblock content%}

   
83. create the register form.
    -- goto models.py file.
    -- import following,
    from django.contrib.auth.models import User
    --Note: this 'User' class has inbuilt form . which is inbuilt in django. we can use it by just importing.
    -- create a new file name form.py in shop folder.
    -- import these two in forms.py file,
    from django.contrib.auth.forms import UserCreationForm
    from shop.models import User
    -- create one Class with name of CustomUserForm(). and pass parameter as UserCreationForm.
    -- create nested class with name of Meta:
    -- inside that Meta class add two attributes.
    -- One is 'model' and value is User.
    -- second is fields  and the value is list of elements we want. ex. ['username', 'email','password1', 'password2']
    -- shop/form.py file,

from django.contrib.auth.forms import UserCreationForm
from shop.models import User

class CustomUserForm(UserCreationForm):
    class Meta:
        model = User
        fields = ['username', 'email','password1', 'password2']



84. Goto views.py file.
    -- import CustomUserForm from form.py
     from shop.form import CustomUserForm
    -- in register function create variable with name 'form' and store CustomUserForm
    -- pass that 'form' as a parameter to template in dictionary format at return line.
    def register(request):
    form = CustomUserForm()
    return render(request, 'shop/register.html', {'form':form})
    -- goto register.html file, and paste tha {{form}} just below the hr tag
    
    -- register.html file,

 {% extends 'shop/layouts/main.html' %}

{% block title %}
Register | BuySpot
{% endblock title %}

{% block content%}
<section class="bg-light py-4 my-5" style="min-height: 600px;">
<div class="container" style="margin-top: 70px;">
    <div class="row">
        <div class="col-12">
            <h4 class="mb-3"> Register page </h4>
            <hr style="border-color: b8bfc2;">
            {{form}}
        </div>
    </div>
</div>
</section>

{% endblock content%}

    

    
-- views.html file,
from django.shortcuts import render, redirect
from shop.models import Category, Product
from django.contrib import messages
from django.http import HttpResponse
from shop.form import CustomUserForm

# Create your views here.
def home(request):
    products = Product.objects.filter(Trending=1)
    return render(request, 'shop/index.html',{'products': products})

def register(request):
    form = CustomUserForm()
    return render(request, 'shop/register.html', {'form':form})

def collections(request):
    category = Category.objects.filter(status=0)
    return render(request, 'shop/collections.html', {'category': category})

def collectionsview(request, name):
    if Category.objects.filter(name=name, status=0).exists():
        products = Product.objects.filter(category__name=name)  # Changed to lowercase
        return render(request, 'shop/products/index.html', {'products': products, "category_name":name})
    else:
        messages.warning(request, "No Such Category Found")
        return redirect('collections')

def product_details(request,cname,pname):
    if(Category.objects.filter(name=cname,status=0)):
        if(Product.objects.filter(name=pname,status=0)):
            product = Product.objects.filter(name=pname,status=0).first()
            return render(request,'shop/products/product_details.html',{'product':product})
        else:
            messages.warning(request, "No Such Product")
            return redirect ('collections')
    else:
        messages.warning(request, "No Such Category")
        return redirect ('collections')

save and run it.


85. next give some style to that register form. 
   -- goto register.html and change {{form}} to {{from.as_p}}
   -- now we remove the default messages available on that form and our own styles using bootstrap.
   -- create one section tag with class name py-4 my-5 just before the last </div> .
    <section>
        
    </section>
</div>
</section>

{% endblock content%} like this.
   --  inthat section , create one div tag with class name of container.
   --  in that container, create one div with class name row.
   --  in that row div, create one div with class name col-6.
   --  in that col-6 div, create one form tag with method='post' and action=''.
   --  in that form tag add {% csrf_token %}. without this we can't post anything.
   --  next line, create one div tag with class name mb-4. inside that div add {{form.username}}
   --  next line, create one div tag with class name mb-4. inside that div add {{form.email}}
   --  next line, create one div tag with class name mb-4. inside that div add {{form.password1}}
   --  next line, create one div tag with class name mb-4. inside that div add {{form.password2}}
   --  next line, create one button tag with type=submit and class name btm btn-primary. inside that div add Register.
   --  outside of </form> tag add one <p> tag with class name my-2 and content "Already User".
   -- create one <a> tag inside that <p> tag with hreg="#' and content 'Login Now'.

   -- register.html file,

   {% extends 'shop/layouts/main.html' %}

{% block title %}
Register | BuySpot
{% endblock title %}

{% block content%}
<section class="bg-light py-4 my-5" style="min-height: 600px;">
<div class="container" style="margin-top: 70px;">
    <div class="row">
        <div class="col-12">
            <h4 class="mb-3"> Register page </h4>
            <hr style="border-color: b8bfc2;">
           
        </div>
    </div>
    <section class="py-4 my-5">
        <div class="container">
            <div class="row"> 
                <div class="col-6">
                    <form method="post" action="">
                        <div class="mb-4">
                            {{form.username}}
                        </div>
                        <div class="mb-4">
                            {{form.email}}
                        </div>
                        <div class="mb-4">
                            {{form.password1}}
                        </div>
                        <div class="mb-4">
                            {{form.password2}}
                        </div>
                        <button type="submit" class="btn btn-primary">Register</button>
                    </form>
                    <p class="my-2">Already user? <a href="#">Login Now</a></p>
                </div>

            </div>

        </div>

    </section>
</div>
</section>

{% endblock content%}

    
85. Now, add bootstrap classes for good finishing in register form.
    -- for that we need 'form-control' class from bootstrap.
    -- goto forms.py
    -- import forms from django.
    -- just before class Meta, create a variable 'username'(our filed)
    -- username = forms.CharField(widget=forms.TextInput(attrs={'class':'form-control','placeholder':'Enter User name'}))
    -- do this for email,password1,password2.
    -- form.py file,

from django.contrib.auth.forms import UserCreationForm
from shop.models import User
from django import forms

class CustomUserForm(UserCreationForm):
    username = forms.CharField(widget=forms.TextInput(attrs={'class':'form-control','placeholder':'Enter User name'}))
    email = forms.CharField(widget=forms.TextInput(attrs={'class':'form-control','placeholder':'Enter Email'}))
    password1 = forms.CharField(widget=forms.TextInput(attrs={'class':'form-control','placeholder':'Enter Password'}))
    password2 = forms.CharField(widget=forms.TextInput(attrs={'class':'form-control','placeholder':'Confirm Password'}))
    class Meta:
        model = User
        fields = ['username', 'email','password1', 'password2']

86. Add label for each field, such as username,email,password1,password2.
    -- for that weed need label tag with class name form-label.
    -- Goto register.html file,
    -- just before, username div put label tag with class name form-label.
    -- just before, email div put label tag with class name form-label.
    -- just before, password1 div put label tag with class name form-label.
    -- just before, password2 div put label tag with class name form-label.
    -- next, we have to change password field. it's visible directly.
    -- goto form.py , change TextInput to PasswordInput

    -- register.py file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
Register | BuySpot
{% endblock title %}

{% block content%}
<section class="bg-light py-4 my-5" style="min-height: 600px;">
<div class="container" style="margin-top: 70px;">
    <div class="row">
        <div class="col-12">
            <h4 class="mb-3"> Register page </h4>
            <hr style="border-color: b8bfc2;">
           
        </div>
    </div>
    <section class="py-4 my-5">
        <div class="container">
            <div class="row"> 
                <div class="col-6">
                    <form method="post" action="">
                        <label for="" class="form-label"><b>User Name</b></label>
                        <div class="mb-4">
                            {{form.username}}
                        </div>
                        <label for="" class="form-label"><b>E-mail</b></label>
                        <div class="mb-4">
                            {{form.email}}
                        </div>
                        <label for="" class="form-label"><b>Password1</b></label>
                        <div class="mb-4">
                            {{form.password1}}
                        </div>
                        <label for="" class="form-label"><b>Password2</b></label>
                        <div class="mb-4">
                            {{form.password2}}
                        </div>
                        <button type="submit" class="btn btn-primary">Register</button>
                    </form>
                    <p class="my-2">Already user? <a href="#">Login Now</a></p>
                </div>

            </div>

        </div>

    </section>
</div>
</section>

{% endblock content%}

    
-- form.py file,

from django.contrib.auth.forms import UserCreationForm
from shop.models import User
from django import forms

class CustomUserForm(UserCreationForm):
    username = forms.CharField(widget=forms.TextInput(attrs={'class':'form-control','placeholder':'Enter User name'}))
    email = forms.CharField(widget=forms.TextInput(attrs={'class':'form-control','placeholder':'Enter Email'}))
    password1 = forms.CharField(widget=forms.PasswordInput(attrs={'class':'form-control','placeholder':'Enter Password'}))
    password2 = forms.CharField(widget=forms.PasswordInput(attrs={'class':'form-control','placeholder':'Confirm Password'}))
    class Meta:
        model = User
        fields = ['username', 'email','password1', 'password2']



87. add user validation for register form, if they made any errors while filling register form, we have to dispaly validation messages.
    -- to do that, go to register.html.
    -- add {% if form.errors.username %} this just after the line {{form.username}}.
    -- after that , create one label tag with class name text-danger  for showing error messeage.
    -- inside label tag put {{ form.errors.username }} and next line add {% endif %}
    -- do this for all fields.
    -- register.html page,

{% extends 'shop/layouts/main.html' %}

{% block title %}
Register | BuySpot
{% endblock title %}

{% block content%}
<section class="bg-light py-4 my-5" style="min-height: 600px;">
<div class="container" style="margin-top: 70px;">
    <div class="row">
        <div class="col-12">
            <h4 class="mb-3"> Register page </h4>
            <hr style="border-color: b8bfc2;">
           
        </div>
    </div>
    <section class="py-4 my-5">
        <div class="container">
            <div class="row"> 
                <div class="col-6">
                    <form method="post" action="">
                        <label for="" class="form-label"><b>User Name</b></label>
                        <div class="mb-4">
                            {{form.username}}
                            {% if form.errors.username %}
                            <label for="" class="text-daanger">{{ form.errors.username}}</label>
                            {{% endif %}}
                        </div>
                        <label for="" class="form-label"><b>E-mail</b></label>
                        <div class="mb-4">
                            {{form.email}}
                            {% if form.errors.email %}
                            <label for="" class="text-daanger">{{ form.errors.email}}</label>
                            {{% endif %}}
                        </div>
                        <label for="" class="form-label"><b>Password1</b></label>
                        <div class="mb-4">
                            {{form.password1}}
                            {% if form.errors.password1 %}
                            <label for="" class="text-daanger">{{ form.errors.password1}}</label>
                            {{% endif %}}
                        </div>
                        <label for="" class="form-label"><b>Password2</b></label>
                        <div class="mb-4">
                            {{form.password2}}
                            {% if form.errors.password2 %}
                            <label for="" class="text-daanger">{{ form.errors.password2}}</label>
                            {{% endif %}}
                        </div>
                        <button type="submit" class="btn btn-primary">Register</button>
                    </form>
                    <p class="my-2">Already user? <a href="#">Login Now</a></p>
                </div>

            </div>

        </div>

    </section>
</div>
</section>

{% endblock content%}

    
88. while clicking 'Register' button , there should be some action performed.
    -- go to views.py,
    -- select register function
    -- next line of varibale with name of 'form',
    -- if request.method=='POST":
    -- pass user passed data as parameter to CustomUserForm.
    form = CustomUserForm(request.POST)
    -- next, check the form is valid or not?
    if form.isvalid():
    -- if it's valid, then save.
    form.save()
    -- if it's not valid, then return error message. error message will load defaultly.
    -- next we can add success message.
    messages.success(request,"Registration Success, You can Login Now...!ð")
    -- after successfull Registration, the page should redirected to Log in page.
    return redirect(/login)
    -- but we not created login view yet.
    -- So that im creating one view just below home view with function name of login
    -- and create login.html file on shop/templates/shop/login.html file.
    -- copy all content from register.html file and paste it on login.html file.
    -- in login.html, remove form tag content and p tag content. change h4 tag content from "Register page" to "Login Page"
    -- next add url for login page in shop/urls.py file,
    ath('login/',views.login, name ='login'),

    -- register.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
Register | BuySpot
{% endblock title %}

{% block content%}
<section class="bg-light py-4 my-5" style="min-height: 600px;">
<div class="container" style="margin-top: 70px;">
    <div class="row">
        <div class="col-12">
            <h4 class="mb-3"> Register page </h4>
            <hr style="border-color: b8bfc2;">
           
        </div>
    </div>
    <section class="py-4 my-5">
        <div class="container">
            <div class="row"> 
                <div class="col-6">
                    <form method="post" action="">
                    {% csrf_token %}
                        <label for="" class="form-label"><b>User Name</b></label>
                        <div class="mb-4">
                            {{form.username}}
                            {% if form.errors.username %}
                            <label for="" class="text-daanger">{{ form.errors.username}}</label>
                            {{% endif %}}
                        </div>
                        <label for="" class="form-label"><b>E-mail</b></label>
                        <div class="mb-4">
                            {{form.email}}
                            {% if form.errors.email %}
                            <label for="" class="text-daanger">{{ form.errors.email}}</label>
                            {{% endif %}}
                        </div>
                        <label for="" class="form-label"><b>Password1</b></label>
                        <div class="mb-4">
                            {{form.password1}}
                            {% if form.errors.password1 %}
                            <label for="" class="text-daanger">{{ form.errors.password1}}</label>
                            {{% endif %}}
                        </div>
                        <label for="" class="form-label"><b>Password2</b></label>
                        <div class="mb-4">
                            {{form.password2}}
                            {% if form.errors.password2 %}
                            <label for="" class="text-daanger">{{ form.errors.password2}}</label>
                            {{% endif %}}
                        </div>
                        <button type="submit" class="btn btn-primary">Register</button>
                    </form>
                    <p class="my-2">Already user? <a href="#">Login Now</a></p>
                </div>

            </div>

        </div>

    </section>
</div>
</section>

{% endblock content%}

    
-- views.py file,

from django.shortcuts import render, redirect
from shop.models import Category, Product
from django.contrib import messages
from django.http import HttpResponse
from shop.form import CustomUserForm

# Create your views here.
def home(request):
    products = Product.objects.filter(Trending=1)
    return render(request, 'shop/index.html',{'products': products})

def login(request):
    return render(request, 'shop/login.html')

def register(request):
    form = CustomUserForm()
    if request.method == 'POST':
        form = CustomUserForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request,"Registration Success, You can Login Now...!ð")
            return redirect('login')

    return render(request, 'shop/register.html', {'form':form})

def collections(request):
    category = Category.objects.filter(status=0)
    return render(request, 'shop/collections.html', {'category': category})

def collectionsview(request, name):
    if Category.objects.filter(name=name, status=0).exists():
        products = Product.objects.filter(category__name=name)  # Changed to lowercase
        return render(request, 'shop/products/index.html', {'products': products, "category_name":name})
    else:
        messages.warning(request, "No Such Category Found")
        return redirect('collections')

def product_details(request,cname,pname):
    if(Category.objects.filter(name=cname,status=0)):
        if(Product.objects.filter(name=pname,status=0)):
            product = Product.objects.filter(name=pname,status=0).first()
            return render(request,'shop/products/product_details.html',{'product':product})
        else:
            messages.warning(request, "No Such Product")
            return redirect ('collections')
    else:
        messages.warning(request, "No Such Category")
        return redirect ('collections')

-- login.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
Register | BuySpot
{% endblock title %}

{% block content%}
<section class="bg-light py-4 my-5" style="min-height: 600px;">
<div class="container" style="margin-top: 70px;">
    <div class="row">
        <div class="col-12">
            <h4 class="mb-3"> User Login </h4>
            <hr style="border-color: b8bfc2;">
           
        </div>
    </div>
    <section class="py-4 my-5">
        <div class="container">
            <div class="row"> 
                <div class="col-6">
                    
                </div>

            </div>

        </div>

    </section>
</div>
</section>

{% endblock content%}

    
-- shop/urls.py file,

from django.contrib import admin
from django.urls import path
from shop import views 

urlpatterns = [
    path('',views.home, name ='home'),
    path('register/',views.register, name ='register'),
    path('login/',views.login, name ='login'),
    path('collections/',views.collections, name ='collections'),
    path('collections/<str:name>',views.collectionsview, name ='collections'),
    path('collections/<str:cname>/<str:pname>',views.product_details, name ='product_details'),
    
]


save and refresh the browser.

89. Now, if i click Register button without filling fields, it will shows error message.
        -- fill username, email, password1, password2 and press Register button.
        -- page redirected to Login.html page.
        -- now data saved successfully on database.
        -- to check that, goto admin page.
        -- check Users....

2:45:45 completed......

90. In Register page, error message coming under the input box. it demages the page look.
    -- try to get the error messages on right side of input box.
    -- goto register.html page,
    -- copy col-6 div content and paste it just below col-6 </div> tag .
    -- in above (1st) col-6 div, remove error messages from if to endif.
    -- in below (2nd) col-6 remove form tag, csrf_token, keep error messeges only.keep if and endif only
    -- in 2nd col-6 div, add class d-block in label for all error messages to display error on next , next lines.
    -- Registration work done.
    -- register.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
Register | BuySpot
{% endblock title %}

{% block content%}
<section class="bg-light py-4 my-5" style="min-height: 600px;">
<div class="container" style="margin-top: 70px;">
    <div class="row">
        <div class="col-12">
            <h4 class="mb-3"> Register page </h4>
            <hr style="border-color: b8bfc2;">
           
        </div>
    </div>
    <section class="py-4 my-5">
        <div class="container">
            <div class="row"> 
                <div class="col-6">
                    <form method='post' action="">
                        {% csrf_token %}
                        <label for="" class="form-label"><b>User Name</b></label>
                        <div class="mb-4">
                            {{form.username}}
                        </div>
                        <label for="" class="form-label"><b>E-mail</b></label>
                        <div class="mb-4">
                            {{form.email}}
                        </div>
                        <label for="" class="form-label"><b>Password1</b></label>
                        <div class="mb-4">
                            {{form.password1}}
                        </div>
                        <label for="" class="form-label"><b>Password2</b></label>
                        <div class="mb-4">
                            {{form.password2}}
                        </div>
                        <button type="submit" class="btn btn-primary">Register</button>
                    </form>
                    <p class="my-2">Already user? <a href="#">Login Now</a></p>
                </div>
                    <div class="col-6">
                        
                                {% if form.errors.username %}
                                <label for="" class="text-danger d-block">{{ form.errors.username}}</label>
                                {% endif %}
                            
                           
                           
                                {% if form.errors.email %}
                                <label for="" class="text-danger d-block">{{ form.errors.email}}</label>
                                {% endif %}
                            
                         
                                {% if form.errors.password1 %}
                                <label for="" class="text-danger d-block">{{ form.errors.password1}}</label>
                                {% endif %}
                         
                                {% if form.errors.password2 %}
                                <label for="" class="text-danger d-block">{{ form.errors.password2}}</label>
                                {% endif %}
                       
                            
                      
                   
                    </div>
            </div>

            

        </div>

    </section>
</div>
</section>

{% endblock content%}

    
91. After successfull register,it should display alert message. we did code for that. but not displayed.
        -- trying to display messrages.
        -- create 'message.html' file on inc folder.
        -- create one for loop in message.html file.
        {% for msg in messages%}
        {% endfor %}
        -- inside of that forl loop, create one div with class name 'alert alert-info alert-dismissible fad show' role='alert'
        -- inside that div pass {{msg}}
        -- next we have to include this file with collections.html,login.html,and register.html, and product/index.html and product/product_details.html
        -- goto login.html and include messsage.html just below of hr tag.
        {% include 'shop/inc/message.html' %}
        -- goto register.html and include messsage.html just below of hr tag.
        {% include 'shop/inc/message.html' %}
        -- goto collections.html and include messsage.html just below of hr tag.
        {% include 'shop/inc/message.html' %}
        -- goto product/index.html and include messsage.html just below of </nav> tag.
        {% include 'shop/inc/message.html' %}
        -- goto product/product_details.html and include messsage.html just below of </nav> tag.
        {% include 'shop/inc/message.html' %}

        -- there is small addition in product/index.html.
        -- add one nav tag with aria-label='breadcrumb
        <nav aria-label="breadcrumb">
        -- inside that nav create one ol tag with class name "breadcrumb"
        -- create two li tags with class name breadcrumb-item and breadcrumb-item active.
        -- inside of 1st li tag create one <a> tag with href="{% url 'home' %} and content Home.
        -- inside of 2nd li tag content {{category_name}} Collections. that's it.

        -- message.html file,

{% for msg in messages%}

<div class="alert alert-info alert-dismissible fade show" role="alert">
    {{msg}}
</div>


{% endfor %}

        -- product/index.html,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">{{category_name}} Product</h4>
                <hr style="border-color: b8bfc2;">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="{% url 'home' %}">Home</a></li>
                        <li class="breadcrumb-item active">{{category_name}} Collections</li>
                    </ol>
                </nav>
                {% include 'shop/inc/message.html' %}
            </div>
            
            {% for item in products %}
                
            <div class="col-md-4 col-lg-3">
                <div class="card my-3">
                    <img src="{{ item.product_name.url }}" class='card-image-top' alt="Categories">

                <a href=" {% url 'product_details' category_name item.name %}" >
                    <div class="card-body">
                        <h5 class="card-title-primary">{{item.name}}</h5>
                        <p class="card-text">
                            <span class="float-start oldprice"><s>Rs.{{item.original_price | stringformat:'d'}}</s></span>
                            <span class="float-end newprice">Rs.{{item.selling_price | stringformat:'d'}}</span>
                            

                        </p>
                    </div>
                </a>
                </div>
            </div>
            {% endfor %}
        </div>

    </div>


</section>


{% endblock content%}

   
92. Create login page for user.
    -- goto views.py and change function name login to login_page. bcz there is inbuilt function already existing with the name 'login'
    
def login_page(request):
    return render(request, 'shop/login.html')
    
    -- change it in shop/urls.py also.
path('login/',views.login_page, name ='login'),

    -- go to navigation bar. copy register line. paste it to the next line and change register to login.
    -- change the class name class="fa fa-sign-in" to login
    -- change the class name class="fa fa-users" to register
<li class="nav-item">
            <a class="nav-link" href="{% url 'login' %}"> <i class="fa fa-sign-in"></i>Login</a>
</li>
<li class="nav-item">
        <a class="nav-link" href="{% url 'register' %}"> <i class="fa fa-users"></i>Register</a>
</li>
    -- {% url 'login' %} paste this in register.html page inside <p> tag , <a> tag href=""
    <p class="my-2">Already user? <a href="{% url 'login' %}">Login Now</a></p>
    -- save and run.

    -- inc/navbar.html file,



<nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
    <div class="container">
      <a class="navbar-brand" href="{% url 'home' %}"> <i class ="fa fa-cart-plus"></i>BuySpot</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item">
            <a class="nav-link" aria-current="page" href="{% url 'home' %}"><i class="fa fa-home"></i>Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="{% url 'login' %}"> <i class="fa fa-sign-in"></i>Login</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="{% url 'register' %}"> <i class="fa fa-users"></i>Register</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="{% url 'collections' %}"> <i class="fa fa-cubes"></i>Collections</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#"> <i class="fa fa-shopping-cart"></i>Cart</a>
          </li>
          
        </ul>
      </div>
    </div>
  </nav>

  -- register.html file,
  {% extends 'shop/layouts/main.html' %}

{% block title %}
Register | BuySpot
{% endblock title %}

{% block content%}
<section class="bg-light py-4 my-5" style="min-height: 600px;">
<div class="container" style="margin-top: 70px;">
    <div class="row">
        <div class="col-12">
            <h4 class="mb-3"> Register page </h4>
            <hr style="border-color: b8bfc2;">
            {% include 'shop/inc/message.html' %}
           
        </div>
    </div>
    <section class="py-4 my-5">
        <div class="container">
            <div class="row"> 
                <div class="col-6">
                    <form method='post' action="">
                        {% csrf_token %}
                        <label for="" class="form-label"><b>User Name</b></label>
                        <div class="mb-4">
                            {{form.username}}
                        </div>
                        <label for="" class="form-label"><b>E-mail</b></label>
                        <div class="mb-4">
                            {{form.email}}
                        </div>
                        <label for="" class="form-label"><b>Password1</b></label>
                        <div class="mb-4">
                            {{form.password1}}
                        </div>
                        <label for="" class="form-label"><b>Password2</b></label>
                        <div class="mb-4">
                            {{form.password2}}
                        </div>
                        <button type="submit" class="btn btn-primary">Register</button>
                    </form>
                    <p class="my-2">Already user? <a href="{% url 'login' %}">Login Now</a></p>
                </div>
                    <div class="col-6">
                        
                                {% if form.errors.username %}
                                <label for="" class="text-danger d-block">{{ form.errors.username}}</label>
                                {% endif %}
                            
                           
                           
                                {% if form.errors.email %}
                                <label for="" class="text-danger d-block">{{ form.errors.email}}</label>
                                {% endif %}
                            
                         
                                {% if form.errors.password1 %}
                                <label for="" class="text-danger d-block">{{ form.errors.password1}}</label>
                                {% endif %}
                         
                                {% if form.errors.password2 %}
                                <label for="" class="text-danger d-block">{{ form.errors.password2}}</label>
                                {% endif %}
                       
                            
                      
                   
                    </div>
            </div>

            

        </div>

    </section>
</div>
</section>

{% endblock content%}

    
93. create  login page contents.
   -- create form tag with method = 'post' actions='' in col-6 div
    <form method='post' action=""></form>
    -- in form tag add {% csrf_token %}
    -- copy {{form.username}} div and {{form.password}} div paste it in just below  {% csrf_token %} at login.html file.
    <label for="" class="form-label"><b>User Name</b></label>
                        <div class="mb-4">
                            {{form.username}}
                        </div>
    <label for="" class="form-label"><b>Password1</b></label>
                        <div class="mb-4">
                            {{form.password1}}
                        </div>
    -- replace {{form.username}} with input tag type='text' name='username' id='username' class='form-control' placeholder="Enter User Name"
    -- replace {{form.password1}} with input tag type='password' name='password' id='password' class='form-control' placeholder="Enter User Name"

<input type="text" id="username" class="form-control" placeholder="Enter User name">
<input type="password" id="password" class="form-control" placeholder="Enter Password">

    -- copy submit button from register.html and paste it in login.html page. change content Login.
     <button type="submit" class="btn btn-primary">Login</button>

    -- login.html file,
{% extends 'shop/layouts/main.html' %}

{% block title %}
Register | BuySpot
{% endblock title %}

{% block content%}
<section class="bg-light py-4 my-5" style="min-height: 600px;">
<div class="container" style="margin-top: 70px;">
    <div class="row">
        <div class="col-12">
            <h4 class="mb-3"> User Login </h4>
            <hr style="border-color: b8bfc2;">
            {% include 'shop/inc/message.html' %}
           
        </div>
    </div>
    <section class="py-4 my-5">
        <div class="container">
            <div class="row"> 
                <div class="col-6">
                    <form method='post' action="">
                        {% csrf_token %}
                        <label for="" class="form-label"><b>Password1</b></label>
                        <div class="mb-4">
                           <input type="text" name="username" id="username" class="form-control" placeholder="Enter User name">
                        </div>
                        <label for="" class="form-label"><b>Password1</b></label>
                        <div class="mb-4">
                            <input type="password" name="password" id="password" class="form-control" placeholder="Enter Password">
                        </div>
                        <button type="submit" class="btn btn-primary">Login</button>


                    </form>
                    
                </div>

            </div>

        </div>

    </section>
</div>
</section>

{% endblock content%}

    


    
94. set actions to the login.html page,
    -- goto views.py file.
    -- import authenticate and login from django.contrib.auth
    from django.contrib.auth import authenticate,login
    -- in login_page function, check the if the request is post.
    if request.method == "POST":
    -- if it's post method, then get 'username' and store it in variable called 'name'.
    name = request.POST.get('username')
    -- similarly get 'password' and store it on 'pwd' variable
    pwd = request.POST.get('password')
    -- next, create variable with name 'user' and store the function authenticate() and parameters request,username = name, password = pwd.
     user = authenticate(request,username = name, password = pwd)
     -- this authenticate() checks the username and password in database.
     -- if the username and passwordis correct, it allows user to login with message.and redirect to home page
     if user is not None:
        login(request,user)
        messages.success(request,"Logged in Successfully")
        return redirect('home')
     -- if it is not , then it returns error message. and redirect to login page.
            else:
            messages.error("request,Invalid User Username or Password")
            return redirect('login')

    -- views.py file,

from django.shortcuts import render, redirect
from shop.models import Category, Product
from django.contrib import messages
from django.http import HttpResponse
from shop.form import CustomUserForm
from django.contrib.auth import authenticate,login

# Create your views here.
def home(request):
    products = Product.objects.filter(Trending=1)
    return render(request, 'shop/index.html',{'products': products})

def login_page(request):
    if request.method == "POST":
        name = request.POST.get('username')
        pwd = request.POST.get('password')
        user = authenticate(request,username = name, password = pwd)
        if user is not None:
            login(request,user)
            messages.success(request,"Logged in Successfully")
            return redirect('home')
        else:
            messages.error(request,"Invalid User Username or Password")
            return redirect('login')
    return render(request, 'shop/login.html')

def register(request):
    form = CustomUserForm()
    if request.method == 'POST':
        form = CustomUserForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request,"Registration Success, You can Login Now...!ð")
            return redirect('login')

    return render(request, 'shop/register.html', {'form':form})

def collections(request):
    category = Category.objects.filter(status=0)
    return render(request, 'shop/collections.html', {'category': category})

def collectionsview(request, name):
    if Category.objects.filter(name=name, status=0).exists():
        products = Product.objects.filter(category__name=name)  # Changed to lowercase
        return render(request, 'shop/products/index.html', {'products': products, "category_name":name})
    else:
        messages.warning(request, "No Such Category Found")
        return redirect('collections')

def product_details(request,cname,pname):
    if(Category.objects.filter(name=cname,status=0)):
        if(Product.objects.filter(name=pname,status=0)):
            product = Product.objects.filter(name=pname,status=0).first()
            return render(request,'shop/products/product_details.html',{'product':product})
        else:
            messages.warning(request, "No Such Product")
            return redirect ('collections')
    else:
        messages.warning(request, "No Such Category")
        return redirect ('collections')

95. Create logout page.
    -- goto shop/urls.py file, create url for logout_page function.
    path('logout/',views.logout_page, name ='logout'),
    -- goto views.py create a new function with name of logout_page.(logout is also inbuilt function. so dont use the name )
    def logout_page(request):
    -- if we want to logout , then we have to check is user logged in successfully or not?
    if request.user.is_authenticated:
    -- if user is successfully  logged in, the he eligible to logout. accept logout request.
    -- import logout from django.contrib.auth
    from django.contrib.auth import authenticate,login,logout
    -- accept request
    logout(request)
    -- add boostrap logout message.
    messages.success(request, "Logged Out Successfully")
    -- redirect to home Page
    return redirect('home')

    -- views.py file,

from django.shortcuts import render, redirect
from shop.models import Category, Product
from django.contrib import messages
from django.http import HttpResponse
from shop.form import CustomUserForm
from django.contrib.auth import authenticate,login,logout

# Create your views here.
def home(request):
    products = Product.objects.filter(Trending=1)
    return render(request, 'shop/index.html',{'products': products})

def logout_page(request):
    if request.user.is_authenticated:
        logout(request)
        messages.success(request, "Logged Out Successfully")
    return redirect('home')


def login_page(request):
    if request.method == "POST":
        name = request.POST.get('username')
        pwd = request.POST.get('password')
        user = authenticate(request,username = name, password = pwd)
        if user is not None:
            login(request,user)
            messages.success(request,"Logged in Successfully")
            return redirect('home')
        else:
            messages.error(request,"Invalid User Username or Password")
            return redirect('login')
    return render(request, 'shop/login.html')

def register(request):
    form = CustomUserForm()
    if request.method == 'POST':
        form = CustomUserForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request,"Registration Success, You can Login Now...!ð")
            return redirect('login')

    return render(request, 'shop/register.html', {'form':form})

def collections(request):
    category = Category.objects.filter(status=0)
    return render(request, 'shop/collections.html', {'category': category})

def collectionsview(request, name):
    if Category.objects.filter(name=name, status=0).exists():
        products = Product.objects.filter(category__name=name)  # Changed to lowercase
        return render(request, 'shop/products/index.html', {'products': products, "category_name":name})
    else:
        messages.warning(request, "No Such Category Found")
        return redirect('collections')

def product_details(request,cname,pname):
    if(Category.objects.filter(name=cname,status=0)):
        if(Product.objects.filter(name=pname,status=0)):
            product = Product.objects.filter(name=pname,status=0).first()
            return render(request,'shop/products/product_details.html',{'product':product})
        else:
            messages.warning(request, "No Such Product")
            return redirect ('collections')
    else:
        messages.warning(request, "No Such Category")
        return redirect ('collections')

96. add logout li tag on inc/navbar.html file,
    -- goto inc/navbar.html file,
    --  remove ul tag fully.
    -- create one div with class='navbar-nav ms-auto"
    <div class="navbar-nav ms-auto">

    --create <a> tag with class 'nav-link' aria-current='page' href='{% url 'home' %}' <i class='fa fa-home'></i>Home</a>
    <a class="nav-link" aria-current="page" href="{% url 'home' %}"><i class="fa fa-home"></i>Home</a>

    -- put if condition. if user is authenticated,
    {% if request.user.is_authenticated %}

    -- create <a> tag with class 'nav-link' aria-current='page' href='#' <i class='fa fa-user'></i>{{request.user}}</a>
    <a class="nav-link" aria-current="page" href="#"><i class="fa fa-user"></i>{{request.user}}</a>

    -- create <a> tag with class 'nav-link' aria-current='page' href='{% url 'logout' %}' <i class='fa fa-sign-out'></i>Logout</a>
    <a class="nav-link" aria-current="page" href="{% url 'logout' %}"><i class="fa fa-sign-out"></i>Logout</a>

    -- create else tag
    {% else %}



    --create <a> tag with class nav-link  href='{% url 'login' %}' <i class='fa fa-sign-in'></i>Login</a>
    <a class="nav-link" href="{% url 'login' %}"><i class="fa fa-sign-in"></i>Login</a>

    --create <a> tag with class nav-link  href='{% url 'register' %}' <i class='fa fa-users'></i>Register</a>
    <a class="nav-link" href="{% url 'register' %}"><i class="fa fa-users"></i>Register</a>

    -- add endif 
    {% endif %}

    --create <a> tag with class nav-link  href='{% url 'collections' %}' <i class='fa fa-cubes'></i>Collections</a>
    <a class="nav-link" href="{% url 'collections' %}"><i class="fa fa-cubes"></i>Collections</a>

    --create <a> tag with class nav-link  href='#' <i class='fa fa-shopping-cart'></i>Cart</a>
    <a class="nav-link" href="#"><i class="fa fa-shopping-cart"></i>Cart</a>

    -- inc/navbar.html file,



<nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
    <div class="container">
      <a class="navbar-brand" href="{% url 'home' %}"> <i class ="fa fa-cart-plus"></i>BuySpot</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>

      <div class="collapse navbar-collapse" id="navbarNav">
        <div class="navbar-nav ms-auto">
          
          <a class="nav-link" aria-current="page" href="{% url 'home' %}"><i class="fa fa-home"></i>Home</a>

          {% if request.user.is_authenticated %}
            <a class="nav-link" aria-current="page" href="#"><i class="fa fa-user"></i>{{request.user}}</a>
            <a class="nav-link" aria-current="page" href="{% url 'logout' %}"><i class="fa fa-sign-out"></i>Logout</a>

          {% else %}
          
            <a class="nav-link" href="{% url 'login' %}"><i class="fa fa-sign-in"></i>Login</a>
            <a class="nav-link" href="{% url 'register' %}"><i class="fa fa-users"></i>Register</a>

          {% endif %}
            <a class="nav-link" href="{% url 'collections' %}"><i class="fa fa-cubes"></i>Collections</a>
            <a class="nav-link" href="#"><i class="fa fa-shopping-cart"></i>Cart</a>


        </div>
      </div>
    </div>
  </nav>

  save and run.....

97. Now, Login, Register, collections, cart displaying default.
    -- register and log in works successfully.
    -- but if i give 120 http://127.0.0.1:8000/login/ directly, it moves to login page.
    -- i dont want like this.
    -- so, goto views.py
    -- in login_page, put if condition, condition is if user is athenticated, then redirect to home page.
    -- else do existing.

        def login_page(request):
    if request.user.is_authenticated:
        return redirect('/')
    else:
        if request.method == "POST":
            name = request.POST.get('username')
            pwd = request.POST.get('password')
            user = authenticate(request,username = name, password = pwd)
            if user is not None:
                login(request,user)
                messages.success(request,"Logged in Successfully")
                return redirect('home')
        else:
            messages.error(request,"Invalid User Username or Password")
            return redirect('login')
    return render(request, 'shop/login.html')
    
    -- views.py file,

from django.shortcuts import render, redirect
from shop.models import Category, Product
from django.contrib import messages
from django.http import HttpResponse
from shop.form import CustomUserForm
from django.contrib.auth import authenticate,login,logout

# Create your views here.
def home(request):
    products = Product.objects.filter(Trending=1)
    return render(request, 'shop/index.html',{'products': products})

def logout_page(request):
    if request.user.is_authenticated:
        logout(request)
        messages.success(request, "Logged Out Successfully")
    return redirect('home')


def login_page(request):
    if request.user.is_authenticated:
        return redirect('/')
    else:
        if request.method == "POST":
            name = request.POST.get('username')
            pwd = request.POST.get('password')
            user = authenticate(request,username = name, password = pwd)
            if user is not None:
                login(request,user)
                messages.success(request,"Logged in Successfully")
                return redirect('home')
        else:
            messages.error(request,"Invalid User Username or Password")
            return redirect('login')
    return render(request, 'shop/login.html')

def register(request):
    form = CustomUserForm()
    if request.method == 'POST':
        form = CustomUserForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request,"Registration Success, You can Login Now...!ð")
            return redirect('login')

    return render(request, 'shop/register.html', {'form':form})

def collections(request):
    category = Category.objects.filter(status=0)
    return render(request, 'shop/collections.html', {'category': category})

def collectionsview(request, name):
    if Category.objects.filter(name=name, status=0).exists():
        products = Product.objects.filter(category__name=name)  # Changed to lowercase
        return render(request, 'shop/products/index.html', {'products': products, "category_name":name})
    else:
        messages.warning(request, "No Such Category Found")
        return redirect('collections')

def product_details(request,cname,pname):
    if(Category.objects.filter(name=cname,status=0)):
        if(Product.objects.filter(name=pname,status=0)):
            product = Product.objects.filter(name=pname,status=0).first()
            return render(request,'shop/products/product_details.html',{'product':product})
        else:
            messages.warning(request, "No Such Product")
            return redirect ('collections')
    else:
        messages.warning(request, "No Such Category")
        return redirect ('collections')


98. Next, Add Cart page.
    -- to add cart, i want to add quantity just before add to cart button.
    -- goto product_details.html
    -- in last after</section> tag add one script tag
    -- if quantity is > 0 , then only it get quantity from user.
    -- so that add one <p> tag under  {% if product.quantity > 0 %} it in product_deatils.html.
    -- inside that <p> tag create one div tag with class="input-group" style="width: 150px;".
    <div class="input-group" style="width: 150px;"></div>
    -- inside that div, create one button tag with class "input-group-text bg-success text-light" id="btnMinus" and content <i class="fa fa-minus"></i>.
    <button class="input-group-text bg-success text-light" id="btnMinus" ><i class="fa fa-minus"></i></button>
    -- craete one input tag with type=text name='qty' id='txtQty' value='1' class='form-control text-center'.
    <input type=text name='qty' id='txtQty' value='1' class='form-control text-center'>
    -- create one button tag with class "input-group-text bg-success text-light" id="btnPlus" and content <i class="fa fa-plus"></i>.
    <button class="input-group-text bg-success text-light" id="btnPlus" ><i class="fa fa-plus"></i></button>
    -- save and run. successfully created quantity structure.

    -- product_deatils.html,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">{{product.name}} Details</h4>
                <hr style="border-color: b8bfc2;">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                      <li class="breadcrumb-item"><a href="{% url 'home' %}">Home</a></li>
                      <li class="breadcrumb-item"><a href="{% url 'collections' product.category.name %}">Collections</a></li>
                      <li class="breadcrumb-item active" aria-current="page">{{product}}</li>
                    </ol>
                  </nav>
                  {% include 'shop/inc/message.html' %}
            </div>

            <div class="col-4 my-3 pic-box">
                {% if product.Trending %}
                <div class="Hot"></div>
                {% endif %}
                <img src="{{product.product_image.url}}" class="card-image-top" alt="{{product.name}}">
            </div>

            <div class="col-8 my-3">
                <h5 class="text-success ">{{product | upper}} </h5>
                <p>{{product.vendor}}</p>
                <p>{{product.description}}</p>
                <h6 class="my-2 text-danger"> Current Price : Rs.<s>{{product.original_price}}</s></h6>
                <h5 class="my-2 text-primary"> Offer Price : Rs.{{product.selling_price}}</h5>
                <div class="my-3">
                    {% if product.quantity > 0 %}
                    <p>
                        <div class="input-group" style="width: 150px;">
                            <button class="input-group-text bg-success text-light" id="btnMinus" ><i class="fa fa-minus"></i></button>
                            <input type=text name='qty' id='txtQty' value='1' class='form-control text-center'>
                            <button class="input-group-text bg-success text-light" id="btnPlus" ><i class="fa fa-plus"></i></button>

                        </div>
                    </p>
                    <button class="btn btn-primary"><i class="fa fa-shopping-cart"></i>Add to Cart</button>
                    {% else %}
                    <button class="btn btn-secondary"><i class="fa fa-minus"></i>Out Of Stock</button>
                    {% endif %}
                    <button class="btn btn-danger"><i class="fa fa-heart"></i></button>
                    
                </div>
            </div>
            
        </div>

    </div>


</section>

<script>


</script>

{% endblock content%}

   
99. Now,  default quantity is 1. and if i click + it should increase. elle if i click - it should decrease. 
    -- this logic was done by javascript.
    -- go to product_deatils.html
    -- goto script tag
    -- inside of script tag, write document.EventListener("DomContentLoaded",function(event){

    })
    -- store in cont varibale these three,  id="btnMinus",id='txtQty', id="btnPlus"
    -- to check this addEventListener is working or not, add one alert message and check it.

<script>
    document.addEventListener("DOMContentLoaded", function(event) {
        const btnPlus = document.getElementById("btnPlus");
        const btnMinus = document.getElementById("btnMinus");
        const txtQty = document.getElementById("txtQty");

        btnPlus.addEventListener("click", function() {
            alert("Hello");
        });
    });
</script>
    -- remove alert .
    -- convert "txtQty" from string to Integer and store it in 'qty' variable.
    let qty = parseInt(txtQty.value,10); # 10 - based on decimal number
    -- incase if txtQty is letters, it should change the quantity to zero.
    -- for that , i used ternary operator.
    qty =isNaN(qty)?0:qty;   # NaN-Not a Number
    -- next, add if condtion. Note: many of ecommerce website allows only 10 quantity to purchase.
    -- logic was, if user enters below 10 , then it should be increased from 1 AND stored in txtQty variable.
                if(qty<10){
                qty++;
                txtQty.value = qty
                }
    save and run. checkt it works or not.
    working successfully.
    -- Now write same logic for btnMinus
        btnMinus.addEventListener("click", function(){
            let qty = parseInt(txtQty.value,10);
            qty = isNaN(qty)?0:qty;
            if(qty>1){
                qty--;
                txtQty.value = qty;
            }
        })
    -- working successfully.

    -- product_deatils.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">{{product.name}} Details</h4>
                <hr style="border-color: b8bfc2;">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                      <li class="breadcrumb-item"><a href="{% url 'home' %}">Home</a></li>
                      <li class="breadcrumb-item"><a href="{% url 'collections' product.category.name %}">Collections</a></li>
                      <li class="breadcrumb-item active" aria-current="page">{{product}}</li>
                    </ol>
                  </nav>
                  {% include 'shop/inc/message.html' %}
            </div>

            <div class="col-4 my-3 pic-box">
                {% if product.Trending %}
                <div class="Hot"></div>
                {% endif %}
                <img src="{{product.product_image.url}}" class="card-image-top" alt="{{product.name}}">
            </div>

            <div class="col-8 my-3">
                <h5 class="text-success ">{{product | upper}} </h5>
                <p>{{product.vendor}}</p>
                <p>{{product.description}}</p>
                <h6 class="my-2 text-danger"> Current Price : Rs.<s>{{product.original_price}}</s></h6>
                <h5 class="my-2 text-primary"> Offer Price : Rs.{{product.selling_price}}</h5>
                <div class="my-3">
                    {% if product.quantity > 0 %}
                    <p>
                        <div class="input-group" style="width: 150px;">
                            <button class="input-group-text bg-success text-light" id="btnMinus" ><i class="fa fa-minus"></i></button>
                            <input type=text name='qty' id='txtQty' value='1' class='form-control text-center'>
                            <button class="input-group-text bg-success text-light" id="btnPlus" ><i class="fa fa-plus"></i></button>

                        </div>
                    </p>
                    <button class="btn btn-primary"><i class="fa fa-shopping-cart"></i>Add to Cart</button>
                    {% else %}
                    <button class="btn btn-secondary"><i class="fa fa-minus"></i>Out Of Stock</button>
                    {% endif %}
                    <button class="btn btn-danger"><i class="fa fa-heart"></i></button>
                    
                </div>
            </div>
            
        </div>

    </div>


</section>

<script>
    document.addEventListener("DOMContentLoaded", function(event) {
        const btnPlus = document.getElementById("btnPlus");
        const btnMinus = document.getElementById("btnMinus");
        const txtQty = document.getElementById("txtQty");

        btnPlus.addEventListener("click", function() {
            let qty = parseInt(txtQty.value,10);
            qty =isNaN(qty)?0:qty;
            if(qty<10){
                qty++;
                txtQty.value = qty;
            }
        });
        btnMinus.addEventListener("click", function(){
            let qty = parseInt(txtQty.value,10);
            qty = isNaN(qty)?0:qty;
            if(qty>1){
                qty--;
                txtQty.value = qty;
            }
        })
    });
</script>

{% endblock content%}

   
100. Next Cart database model.
    -- logic : while user presses Add to cart button, it should  check first whether the user is authenticated or not.
    if user is authenticated , then the quantity and products must  stored in database.
    -- Goto models.py file.
    -- create class with name of 'Cart;
    class Cart(models.Model):
    -- add fields user,product,product_quantity and created_at.
    -- user and product is ForeignKey with User and Product.

class Cart(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    product_qty = models.IntegerField(null=False,blank=False)
    created_at = models.DateTimeField(auto_now_add=True)

    -- next, py manage.py makemigrations
    -- py manage.py migrate
    successfully created Cart table.

    -- models.py file,

from django.db import models
from django.contrib.auth.models import User
import datetime
import os

def getFileName(instance,filename):
    now_time = datetime.datetime.now().strftime("%Y%m%d%H:%M:%S")
    new_filename = "%s%s"%(now_time,filename)
    return os.path.join('uploads/',new_filename)

class Category(models.Model):
    name = models.CharField(max_length=150, blank=False, null=False)
    image = models.ImageField(upload_to = getFileName,blank=True, null=True)
    description = models.TextField(max_length=1500, blank=False, null=False)
    status = models.BooleanField(default=False, help_text="0-show, 1-Hideen")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.name}"

class Product(models.Model):
    category = models.ForeignKey(Category,on_delete=models.CASCADE)
    name = models.CharField(max_length=150, blank=False, null=False)
    vendor = models.CharField(max_length=150, blank=False, null=False)
    product_image = models.ImageField(upload_to = getFileName,blank=True, null=True)
    quantity=models.IntegerField(null=False,blank=False)
    original_price = models.FloatField(null=False, blank=False)
    selling_price = models.FloatField(null=False, blank=False)
    description = models.TextField(max_length=1500, blank=False, null=False)
    status = models.BooleanField(default=False, help_text="0-show, 1-Hideen")
    Trending = models.BooleanField(default=False, help_text="0-default, 1-Trending")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.name}"
    
class Cart(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    product_qty = models.IntegerField(null=False,blank=False)
    created_at = models.DateTimeField(auto_now_add=True)

  
101. to store quantity and product_deatils in databae, we need ajax requeston javascript.
    -- goto product_deatils.html file
    -- add {% csrf_token %} on below {% if product.quantity > 0 %}
    -- add <input type="hidden" value="{{product_id}}" name="" id="pid"> this line above {% csrf_token %}
    {% if product.quantity > 0 %}
        <input type="hidden" value="{{product_id}}" name="" id="pid">
        {% csrf_token %} 
    -- now we have product_id,quantity and token. we have to send these 3 to database while user clicks Add to Cart button.
    -- add id='btnCart' to Add to Cart button.
    <button class="btn btn-primary" id="btnCart"><i class="fa fa-shopping-cart"></i>Add to Cart</button>
    -- goto to script tag and get element id 'pid' and store variable const pid.
    const pid = document.getElementById("pid");
    -- next stor csrf_token in 'tkn' variable using querySelector.
    const tkn = document.querySelector('[name=name="csrfmiddlewaretoken"]').value
    #u can get name="csrfmiddlewaretoken" by ctrl+u on product_details page.
    -- goto to script tag and get element btnCart  and store variable const btnCart.
     const btnCart = document.getElementById("btnCart")
    -- create one addEventListener to BtnCart.
    -- inside if block,create one object named postobj and store qty, pid.value,tkn, in variables product_qty,pid,token

 btnCart.addEventListener("click", function(){
            qty = isNaN(qty)?0:qty;
            if(qty>0){
                let postobj={
                    product_qty : qty,
                    pid : pid.value ,
                    token : tkn 

                }
            }
            else{
                alert("Please Enter the quantity")
            }

        })

        -- product_deatils.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">{{product.name}} Details</h4>
                <hr style="border-color: b8bfc2;">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                      <li class="breadcrumb-item"><a href="{% url 'home' %}">Home</a></li>
                      <li class="breadcrumb-item"><a href="{% url 'collections' product.category.name %}">Collections</a></li>
                      <li class="breadcrumb-item active" aria-current="page">{{product}}</li>
                    </ol>
                  </nav>
                  {% include 'shop/inc/message.html' %}
            </div>

            <div class="col-4 my-3 pic-box">
                {% if product.Trending %}
                <div class="Hot"></div>
                {% endif %}
                <img src="{{product.product_image.url}}" class="card-image-top" alt="{{product.name}}">
            </div>

            <div class="col-8 my-3">
                <h5 class="text-success ">{{product | upper}} </h5>
                <p>{{product.vendor}}</p>
                <p>{{product.description}}</p>
                <h6 class="my-2 text-danger"> Current Price : Rs.<s>{{product.original_price}}</s></h6>
                <h5 class="my-2 text-primary"> Offer Price : Rs.{{product.selling_price}}</h5>
                <div class="my-3">
                    {% if product.quantity > 0 %}
                    <input type="hidden" value="{{product_id}}" name="" id="pid">
                    {% csrf_token %} 
                    <p>
                        <div class="input-group" style="width: 150px;">
                            <button class="input-group-text bg-success text-light" id="btnMinus" ><i class="fa fa-minus"></i></button>
                            <input type=text name='qty' id='txtQty' value='1' class='form-control text-center'>
                            <button class="input-group-text bg-success text-light" id="btnPlus" ><i class="fa fa-plus"></i></button>

                        </div>
                    </p>
                    <button class="btn btn-primary" id="btnCart"><i class="fa fa-shopping-cart"></i>Add to Cart</button>
                    {% else %}
                    <button class="btn btn-secondary"><i class="fa fa-minus"></i>Out Of Stock</button>
                    {% endif %}
                    <button class="btn btn-danger"><i class="fa fa-heart"></i></button>
                    
                </div>
            </div>
            
        </div>

    </div>


</section>

<script>
    document.addEventListener("DOMContentLoaded", function(event) {
        const btnPlus = document.getElementById("btnPlus");
        const btnMinus = document.getElementById("btnMinus");
        const txtQty = document.getElementById("txtQty");
        const pid = document.getElementById("pid");
        const tkn = document.querySelector('[name="csrfmiddlewaretoken"]').value
        const btnCart = document.getElementById("btnCart")

        btnPlus.addEventListener("click", function() {
            let qty = parseInt(txtQty.value,10);
            qty =isNaN(qty)?0:qty;
            if(qty<10){
                qty++;
                txtQty.value = qty;
            }
        });
        btnMinus.addEventListener("click", function(){
            let qty = parseInt(txtQty.value,10);
            qty = isNaN(qty)?0:qty;
            if(qty>1){
                qty--;
                txtQty.value = qty;
            }
        })
        btnCart.addEventListener("click", function(){
            let qty = parseInt(txtQty.value,10);
            qty = isNaN(qty)?0:qty;
            if(qty>0){
                let postobj={
                    product_qty : qty,
                    pid : pid.value ,
                    token : tkn 

                }
                console.log(postobj);
            }
            else{
                alert("Please Enter the quantity")
            }

        });
    });
</script>

{% endblock content%}



102. Now passing this id,qty and token to server via ajax.
    -- first, we have to create one Url for Cart .
    -- goto shop/urls.py file and add one url for addtocart
    path('addtocart/',views.add_to_cart, name ='addtocart'),
    -- next create one view to  add_to_cart.
    -- goto views.py file,
    -- create a function called add_to_cart. and dont write anything , just pass.
    def add_to_cart(request):
        pass
    -- Now we can pass the id,qty and token to server via ajax in javascript through http request method 'post'.
    -- goto product_details.html file,
    -- remove token key and value from object.
    -- fetch() -- way to pass parameters to database. (not explaine properly.)
    -- remove {% csrf_token %}
<script>
    document.addEventListener("DOMContentLoaded", function(event) {
        const btnPlus = document.getElementById("btnPlus");
        const btnMinus = document.getElementById("btnMinus");
        const txtQty = document.getElementById("txtQty");
        const pid = document.getElementById("pid");
        const tkn = document.querySelector('[name="csrfmiddlewaretoken"]').value
        const btnCart = document.getElementById("btnCart")

        btnPlus.addEventListener("click", function() {
            let qty = parseInt(txtQty.value,10);
            qty =isNaN(qty)?0:qty;
            if(qty<10){
                qty++;
                txtQty.value = qty;
            }
        });
        btnMinus.addEventListener("click", function(){
            let qty = parseInt(txtQty.value,10);
            qty = isNaN(qty)?0:qty;
            if(qty>1){
                qty--;
                txtQty.value = qty;
            }
        })
        btnCart.addEventListener("click", function(){
            let qty = parseInt(txtQty.value,10);
            qty = isNaN(qty)?0:qty;
            if(qty>0){
                let postobj={
                    product_qty : qty,
                    pid : pid.value 
                
                }
                console.log(postobj);
                fetch("/addtocart",{
                    method: "POST",
                    credentials : "same-origin",
                    headers: {
                        'Accept' : 'application/json',
                        'X-Requested-With' : 'XML-HttpRequest',
                        'X-CSRFToken' : '{{ csrf_token }}'
                     },
                     body: JSON.stringify(postobj)
                }).then(response=>{
                    return response.json();
                }).then(data=>{
                    console.log(data);
                });
            }
            else{
                alert("Please Enter the quantity")
            }

        });
    });
</script>

        -- goto views.py
        -- write if condtion on add_to_cart function
        -- from django.http import HttpResponse,JsonResponse 
def add_to_cart(request):
    if request.headers.get('x-requested-with') == ('XML-HttpRequest'):
        pass
   else:
        return JsonResponse({'status':'Invalid Access'}, status = 200)

        -- next, check whether the user is authenticated or not in place of pass.

def add_to_cart(request):
   if request.headers.get('x-requested-with') == ('XML-HttpRequest'):
      if request.user.is_authenticated:
         pass
      else:
         return JsonResponse({'status':'Log in to Add Cart'}, status = 200)
         
   else:
      return JsonResponse({'status':'Invalid Access'}, status = 200)

      -- pass 'data' if user is authenticated. (jason data) and import json

def add_to_cart(request):
   if request.headers.get('x-requested-with') == ('XML-HttpRequest'):
      if request.user.is_authenticated:
         data = json.load(request)
      else:
         return JsonResponse({'status':'Log in to Add Cart'}, status = 200)
         
   else:
      return JsonResponse({'status':'Invalid Access'}, status = 200)

    -- viwes.py file,

from django.shortcuts import render, redirect
from shop.models import Category, Product
from django.contrib import messages
from django.http import HttpResponse,JsonResponse
from shop.form import CustomUserForm
from django.contrib.auth import authenticate,login,logout
import json

# Create your views here.
def home(request):
    products = Product.objects.filter(Trending=1)
    return render(request, 'shop/index.html',{'products': products})
def add_to_cart(request):
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        if request.user.is_authenticated:
            try:
                data = json.load(request)
                print(data['product_qty'])
                print(data['pid'])
                print(request.user.id)
                return JsonResponse({'status': 'Product Add to Cart success'}, status=200)
            except json.JSONDecodeError:
                return JsonResponse({'status': 'Invalid JSON data'}, status=400)
        else:
            return JsonResponse({'status': 'Log in to Add Cart'}, status=200)
    else:
        return JsonResponse({'status': 'Invalid Access'}, status=200)



def logout_page(request):
    if request.user.is_authenticated:
        logout(request)
        messages.success(request, "Logged Out Successfully")
    return redirect('home')


def login_page(request):
  if request.user.is_authenticated:
    return redirect('home')
  else:
    if request.method=='POST':
      name=request.POST.get('username')
      pwd=request.POST.get('password')
      user=authenticate(request,username=name,password=pwd)
      if user is not None:
        login(request,user)
        messages.success(request,"Logged in Successfully")
        return redirect("/")
      else:
        messages.error(request,"Invalid User Name or Password")
        return redirect("/login")
    return render(request,"shop/login.html")

      
def register(request):
    form = CustomUserForm()
    if request.method == 'POST':
        form = CustomUserForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request,"Registration Success, You can Login Now...!ð")
            return redirect('login')

    return render(request, 'shop/register.html', {'form':form})

def collections(request):
    category = Category.objects.filter(status=0)
    return render(request, 'shop/collections.html', {'category': category})

def collectionsview(request, name):
    if Category.objects.filter(name=name, status=0).exists():
        products = Product.objects.filter(category__name=name)  # Changed to lowercase
        return render(request, 'shop/products/index.html', {'products': products, "category_name":name})
    else:
        messages.warning(request, "No Such Category Found")
        return redirect('collections')

def product_details(request,cname,pname):
    if(Category.objects.filter(name=cname,status=0)):
        if(Product.objects.filter(name=pname,status=0)):
            product = Product.objects.filter(name=pname,status=0).first()
            return render(request,'shop/products/product_details.html',{'product':product})
        else:
            messages.warning(request, "No Such Product")
            return redirect ('collections')
    else:
        messages.warning(request, "No Such Category")
        return redirect ('collections')

 103. now, save all the data (product_qty,pid,token) in database.
    -- goto views.py 
    -- remove print and store it on variable.
        product_qty = (data['product_qty'])
        product_qty = (data['pid'])
    -- user.id --> comment it
     # print(request.user.id)
    -- next, logic :
        1. the user can access Add to cart if the selected product available in store.
        product_status = Product.objects.grt(id = product_id )
        2. if product available in store, next check tha particular user already added that product or not in Cart
                if product_status:
                    if Cart.objects.filter(user= request.user.id,product_id = product_id):
                        return JsonResponse({'status': 'Product Already in cart'}, status=200)
        3. in else, check product quantity in store, if it's available Add it to cart.
         else:
            if product_status.quantity>=product_qty:
                Cart.objects.create(user= request.user.id,product_id = product_id,product_qty = product_qty)
                return JsonResponse({'status': 'Product Added to Cart successfully'}, status=200)
                else:
                    return JsonResponse({'status': 'Product Stock out of Market'}, status=200)
        4. finally, remove return JsonResponse({'status': 'Product Add to Cart success'}, status=200) line.

        working successfully on console..

    -- views.py file,

from django.shortcuts import render, redirect
from shop.models import Category, Product, Cart
from django.contrib import messages
from django.http import HttpResponse,JsonResponse
from shop.form import CustomUserForm
from django.contrib.auth import authenticate,login,logout
import json

# Create your views here.
def home(request):
    products = Product.objects.filter(Trending=1)
    return render(request, 'shop/index.html',{'products': products})
def add_to_cart(request):
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        if request.user.is_authenticated:
            try:
                data = json.load(request)
                product_qty = (data['product_qty'])
                product_id = (data['pid'])
                # print(request.user.id)
                product_status = Product.objects.get(id = product_id )
                if product_status:
                    if Cart.objects.filter(user= request.user,product_id = product_id):
                        return JsonResponse({'status': 'Product Already in cart'}, status=200)
                    else:
                        if product_status.quantity>=product_qty:
                            Cart.objects.create(user= request.user,product_id = product_id, product_qty = product_qty)
                            return JsonResponse({'status': 'Product Added to Cart successfully'}, status=200)
                        else:
                            return JsonResponse({'status': 'Product Stock out of Market'}, status=200)

               
            except json.JSONDecodeError:
                return JsonResponse({'status': 'Invalid JSON data'}, status=400)
        else:
            return JsonResponse({'status': 'Log in to Add Cart'}, status=200)
    else:
        return JsonResponse({'status': 'Invalid Access'}, status=200)



def logout_page(request):
    if request.user.is_authenticated:
        logout(request)
        messages.success(request, "Logged Out Successfully")
    return redirect('home')


def login_page(request):
  if request.user.is_authenticated:
    return redirect('home')
  else:
    if request.method=='POST':
      name=request.POST.get('username')
      pwd=request.POST.get('password')
      user=authenticate(request,username=name,password=pwd)
      if user is not None:
        login(request,user)
        messages.success(request,"Logged in Successfully")
        return redirect("/")
      else:
        messages.error(request,"Invalid User Name or Password")
        return redirect("/login")
    return render(request,"shop/login.html")

      
def register(request):
    form = CustomUserForm()
    if request.method == 'POST':
        form = CustomUserForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request,"Registration Success, You can Login Now...!ð")
            return redirect('login')

    return render(request, 'shop/register.html', {'form':form})

def collections(request):
    category = Category.objects.filter(status=0)
    return render(request, 'shop/collections.html', {'category': category})

def collectionsview(request, name):
    if Category.objects.filter(name=name, status=0).exists():
        products = Product.objects.filter(category__name=name)  # Changed to lowercase
        return render(request, 'shop/products/index.html', {'products': products, "category_name":name})
    else:
        messages.warning(request, "No Such Category Found")
        return redirect('collections')

def product_details(request,cname,pname):
    if(Category.objects.filter(name=cname,status=0)):
        if(Product.objects.filter(name=pname,status=0)):
            product = Product.objects.filter(name=pname,status=0).first()
            return render(request,'shop/products/product_details.html',{'product':product})
        else:
            messages.warning(request, "No Such Product")
            return redirect ('collections')
    else:
        messages.warning(request, "No Such Category")
        return redirect ('collections')


104. Till now all the instructions like, Login to add cart, Out of stock, everything i did in console only.
    -- now, we are going to print on alert box.
    -- goto product_details.html and add comment this console.log(data);
    //console.log(data);
    -- alert(data['status']); --> add this message just below //console.log(data);
    -- next do comment console.log(postobj); this also.
    //console.log(postobj);

    -- product_details.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
BuySpot | Online Shopping
{% endblock title %}

{% block content%}

<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">{{product.name}} Details</h4>
                <hr style="border-color: b8bfc2;">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                      <li class="breadcrumb-item"><a href="{% url 'home' %}">Home</a></li>
                      <li class="breadcrumb-item"><a href="{% url 'collections' product.category.name %}">Collections</a></li>
                      <li class="breadcrumb-item active" aria-current="page">{{product}}</li>
                    </ol>
                  </nav>
                  {% include 'shop/inc/message.html' %}
            </div>

            <div class="col-4 my-3 pic-box">
                {% if product.Trending %}
                <div class="Hot"></div>
                {% endif %}
                <img src="{{product.product_image.url}}" class="card-image-top" alt="{{product.name}}">
            </div>

            <div class="col-8 my-3">
                <h5 class="text-success ">{{product | upper}} </h5>
                <p>{{product.vendor}}</p>
                <p>{{product.description}}</p>
                <h6 class="my-2 text-danger"> Current Price : Rs.<s>{{product.original_price}}</s></h6>
                <h5 class="my-2 text-primary"> Offer Price : Rs.{{product.selling_price}}</h5>
                <div class="my-3">
                    {% if product.quantity > 0 %}
                    <input type="hidden" value="{{product.id}}" id="pid">
                    {% csrf_token %} 
                    <p>
                        <div class="input-group" style="width: 150px;">
                            <button class="input-group-text bg-success text-light" id="btnMinus" ><i class="fa fa-minus"></i></button>
                            <input type=text name='qty' id='txtQty' value='1' class='form-control text-center'>
                            <button class="input-group-text bg-success text-light" id="btnPlus" ><i class="fa fa-plus"></i></button>

                        </div>
                    </p>
                    <button class="btn btn-primary" id="btnCart"><i class="fa fa-shopping-cart"></i>Add to Cart</button>
                    {% else %}
                    <button class="btn btn-secondary"><i class="fa fa-minus"></i>Out Of Stock</button>
                    {% endif %}
                    <button class="btn btn-danger"><i class="fa fa-heart"></i></button>
                    
                </div>
            </div>
            
        </div>

    </div>


</section>

<script>
    document.addEventListener("DOMContentLoaded", function(event) {
      const btnPlus = document.getElementById("btnPlus");
      const btnMinus = document.getElementById("btnMinus");
      const txtQty = document.getElementById("txtQty");
      const pid = document.getElementById("pid");
      const btnCart = document.getElementById("btnCart");

        btnPlus.addEventListener("click", function() {
            let qty = parseInt(txtQty.value,10);
            qty =isNaN(qty)?0:qty;
            if(qty<10){
                qty++;
                txtQty.value = qty;
            }
        });
        btnMinus.addEventListener("click", function(){
            let qty = parseInt(txtQty.value,10);
            qty = isNaN(qty)?0:qty;
            if(qty>1){
                qty--;
                txtQty.value = qty;
            }
        })
        btnCart.addEventListener("click", function(){
            let qty = parseInt(txtQty.value,10);
            qty = isNaN(qty)?0:qty;
            if(qty>0){
                let postobj={
                    product_qty : qty,
                    pid : pid.value,
                
                };
                // console.log(postobj);
                fetch("/addtocart",{
                    method: 'POST',
                    credentials : 'same-origin',
                    headers: {
                        'Accept' : 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                        'X-CSRFToken' : '{{ csrf_token }}',
                     },
                     body: JSON.stringify(postobj)
                }).then(response=>{
                    return response.json();
                }).then(data=>{
                    // console.log(data);
                    alert(data['status']);
                });
            }
            else{
                alert("Please Enter the quantity")
            }

        });
    });
</script>

{% endblock content%}

   
105. next, create individualpage to display cart items.
    -- goto inc/navbar.html
    -- add {% url 'cart' %}
    <a class="nav-link" href="{% url 'cart' %}"><i class="fa fa-shopping-cart"></i>Cart</a>
    -- goto shop/urls.py and add path to cart.
    path('cart',views.cart_page, name ='cart'),
    -- now, goto views.py and add one function for cart_page.
    -- add  authenticated user only can access add to cart.
        if request.user.is_authenticated:
            pass
    -- else redirect to home page.
    else:
        return redirect('home')
    -- remove pass and get the particular user and store on 'cart' variable.
    cart = Cart.objects.filter( user = request.user)
    -- then, return shop/cart.html and cart as template tag(dictionary format)
    return render(request, 'templates/shop/cart.html,',{'cart': cart})

    -- create cart.html file on 'templates/shop' folder.
    -- copy the content from collections.html and paste it on cart.html.
    -- remove <section class ='py-5 text-center container' style="margin-top: 70px;" this section tag.
    -- change <h4 class="mb-3">Categories</h4> to <h4 class="mb-3">Cart items</h4>
    -- remove this . {% include 'shop/inc/message.html' %} 
    -- remove div tag completely. <div class="col-md-4 col-lg-3">
    -- change {% for item in category %} to {% for item in cart %}
    -- pass the key 'item'in jinja template {{item}}
      {% for item in category %}
         {{item}}
      {% endfor %}
      save and refresh the web page.
    -- im getting Cart object (1) Cart object (2) on my cart page. (objects)
    -- templates/shop/cart.html,

{% extends 'shop/layouts/main.html' %}

{% block title %}
Cart | BuySpot
{% endblock title %}

{% block content%}


<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Cart</h4>
                <hr style="border-color: b8bfc2;">
                
            </div>
                {% for item in cart %}
                    {{item}}
                
                
                {% endfor %}
            
        </div>

    </div>

</section>


{% endblock content%}

    -- views.py file,

from django.shortcuts import render, redirect
from shop.models import Category, Product, Cart
from django.contrib import messages
from django.http import HttpResponse,JsonResponse
from shop.form import CustomUserForm
from django.contrib.auth import authenticate,login,logout
import json

# Create your views here.
def home(request):
    products = Product.objects.filter(Trending=1)
    return render(request, 'shop/index.html',{'products': products})

def cart_page(request):
    if request.user.is_authenticated:
        cart = Cart.objects.filter( user = request.user)
        return render(request, 'shop/cart.html',{'cart': cart})
    else:
        return redirect('home')


def add_to_cart(request):
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        if request.user.is_authenticated:
            try:
                data = json.load(request)
                product_qty = (data['product_qty'])
                product_id = (data['pid'])
                # print(request.user.id)
                product_status = Product.objects.get(id = product_id )
                if product_status:
                    if Cart.objects.filter(user= request.user,product_id = product_id):
                        return JsonResponse({'status': 'Product Already in cart'}, status=200)
                    else:
                        if product_status.quantity>=product_qty:
                            Cart.objects.create(user= request.user,product_id = product_id, product_qty = product_qty)
                            return JsonResponse({'status': 'Product Added to Cart successfully'}, status=200)
                        else:
                            return JsonResponse({'status': 'Product Stock out of Market'}, status=200)

               
            except json.JSONDecodeError:
                return JsonResponse({'status': 'Invalid JSON data'}, status=400)
        else:
            return JsonResponse({'status': 'Log in to Add Cart'}, status=200)
    else:
        return JsonResponse({'status': 'Invalid Access'}, status=200)



def logout_page(request):
    if request.user.is_authenticated:
        logout(request)
        messages.success(request, "Logged Out Successfully")
    return redirect('home')


def login_page(request):
  if request.user.is_authenticated:
    return redirect('home')
  else:
    if request.method=='POST':
      name=request.POST.get('username')
      pwd=request.POST.get('password')
      user=authenticate(request,username=name,password=pwd)
      if user is not None:
        login(request,user)
        messages.success(request,"Logged in Successfully")
        return redirect("/")
      else:
        messages.error(request,"Invalid User Name or Password")
        return redirect("/login")
    return render(request,"shop/login.html")

      
def register(request):
    form = CustomUserForm()
    if request.method == 'POST':
        form = CustomUserForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request,"Registration Success, You can Login Now...!ð")
            return redirect('login')

    return render(request, 'shop/register.html', {'form':form})

def collections(request):
    category = Category.objects.filter(status=0)
    return render(request, 'shop/collections.html', {'category': category})

def collectionsview(request, name):
    if Category.objects.filter(name=name, status=0).exists():
        products = Product.objects.filter(category__name=name)  # Changed to lowercase
        return render(request, 'shop/products/index.html', {'products': products, "category_name":name})
    else:
        messages.warning(request, "No Such Category Found")
        return redirect('collections')

def product_details(request,cname,pname):
    if(Category.objects.filter(name=cname,status=0)):
        if(Product.objects.filter(name=pname,status=0)):
            product = Product.objects.filter(name=pname,status=0).first()
            return render(request,'shop/products/product_details.html',{'product':product})
        else:
            messages.warning(request, "No Such Product")
            return redirect ('collections')
    else:
        messages.warning(request, "No Such Category")
        return redirect ('collections')



106. next we can display the objects in table format using boostrap.
    -- just below, {% end for %}, create one table tag with class name " table table-bordered.
    -- create one tr tag and inside of tr tag create 4 th tag with content of Image,Product Name,Quantity, and Remove.
                    <table class="table table-bordered">
                    <tr>
                        <th>Image</th>
                        <th>Product Name</th>
                        <th>Quantity</th>
                        <th>Remove</th>
                    </tr>
                </table>
    -- cut the for loop and paste it below tha </table> tag.
        <table class="table table-bordered">
                    <tr>
                        <th>Image</th>
                        <th>Product Name</th>
                        <th>Quantity</th>
                        <th>Remove</th>
                    </tr>
        </table>
        {% for item in cart %}
            {{item}}
        {% endfor %}

    -- next remove  {{item}}.
    -- create one  tr tag on for loop,
    -- create 4 td tag inside that tr tag.
                {% for item in cart %}
                <tr>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
            {% endfor %}
    -- in first td tag i need image.
    -- so add one img tag in first td tag
    <td><img src="{{ item.product.product_image.url }} " height="75px" alt="{item.product_name}"></td>
    -- in 2nd td tag, add <td>{{ item.product_name}}</td>
    -- in 3rd <td>{{ item.product_qty}}</td>
    -- 4th td tag, <td><button class="btn btn-danger btn-sm"><i class="fa fa-trash"></i>Remove</button></td>
    -- finally cut the </table> tag from top to paste under {% endfor %}
    save and refresh

    -- cart.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
Cart | BuySpot
{% endblock title %}

{% block content%}


<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Cart</h4>
                <hr style="border-color: b8bfc2;">
                
            </div>


            <table class="table table-bordered">
                <tr>
                    <th>Image</th>
                    <th>Product Name</th>
                    <th>Quantity</th>
                    <th>Remove</th>
                </tr>
            
            {% for item in cart %}
                <tr>
                    <td><img src="{{ item.product.product_image.url }}" height="75px" width="50px"  alt="{{ item.product.name }}"></td>
                    <td>{{ item.product.name }}</td>
                    <td>{{ item.product_qty }}</td>
                    <td><button class="btn btn-danger btn-sm"><i class="fa fa-trash"></i>Remove</button></td>
                </tr>
            {% endfor %}
        </table>
            
        </div>

    </div>

</section>


{% endblock content%}



107.   Next add Unit price and Total Amount in the table.
    -- remove table class 'table table-bordered'.
    -- add Unit in th tag just above Quantity
    -- add Amount in th tag jus above Remove
                <table class="">
                <tr>
                    <th>Image</th>
                    <th>Product Name</th>
                    <th>Unit</th>
                    <th>Quantity</th>
                    <th>Amount</th>
                    <th>Remove</th>
                </tr>
    -- add td for {{item.product.selling_price}} just above <td>{{ item.product_qty }}</td>
    <td>{{ item.product.selling_price }}</td>
    save and refresh...
    -- Unit price displaying in float. Now we remove that decimal points.
    -- add | stringformat:'d' to <td>{{ item.product.selling_price }}</td>
    <td>{{ item.product.selling_price  stringformat:'d' }}</td>
    -- now multiply Unit with Quantity and the result display on Amount.
    -- go to model.py
    -- inside the Cart model...... check the indentation.....
    -- create new property using @property decorator.
    -- add @ property
    -- add function with name total_cost parameter self
class Cart(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    product_qty = models.IntegerField(null=False,blank=False)
    created_at = models.DateTimeField(auto_now_add=True)

    @property
    def total_cost(self):
       return self.product_qty * self.product.selling_price
save it.

--models.py file,

from django.db import models
from django.contrib.auth.models import User
import datetime
import os

def getFileName(instance,filename):
    now_time = datetime.datetime.now().strftime("%Y%m%d%H:%M:%S")
    new_filename = "%s%s"%(now_time,filename)
    return os.path.join('uploads/',new_filename)

class Category(models.Model):
    name = models.CharField(max_length=150, blank=False, null=False)
    image = models.ImageField(upload_to = getFileName,blank=True, null=True)
    description = models.TextField(max_length=1500, blank=False, null=False)
    status = models.BooleanField(default=False, help_text="0-show, 1-Hideen")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.name}"

class Product(models.Model):
    category = models.ForeignKey(Category,on_delete=models.CASCADE)
    name = models.CharField(max_length=150, blank=False, null=False)
    vendor = models.CharField(max_length=150, blank=False, null=False)
    product_image = models.ImageField(upload_to = getFileName,blank=True, null=True)
    quantity=models.IntegerField(null=False,blank=False)
    original_price = models.FloatField(null=False, blank=False)
    selling_price = models.FloatField(null=False, blank=False)
    description = models.TextField(max_length=1500, blank=False, null=False)
    status = models.BooleanField(default=False, help_text="0-show, 1-Hideen")
    Trending = models.BooleanField(default=False, help_text="0-default, 1-Trending")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.name}"
    
class Cart(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    product_qty = models.IntegerField(null=False,blank=False)
    created_at = models.DateTimeField(auto_now_add=True)

    @property
    def total_cost(self):
        return self.product_qty * self.product.selling_price


        -- templates/shop/cart.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
Cart | BuySpot
{% endblock title %}

{% block content%}


<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Cart</h4>
                <hr style="border-color: b8bfc2;">
                
            </div>


            <table class="">
                <tr>
                    <th>Image</th>
                    <th>Product Name</th>
                    <th>Unit</th>
                    <th>Quantity</th>
                    <th>Amount</th>
                    <th>Remove</th>
                </tr>
            
            {% for item in cart %}
                <tr>
                    <td><img src="{{ item.product.product_image.url }}" height="75px" width="50px"  alt="{{ item.product.name }}"></td>
                    <td>{{ item.product.name }}</td>
                    <td>{{ item.product.selling_price | stringformat:'d'}}</td>
                    <td>{{ item.product_qty }}</td>
                    <td><button class="btn btn-danger btn-sm"><i class="fa fa-trash"></i>Remove</button></td>
                </tr>
            {% endfor %}
        </table>
            
        </div>

    </div>

</section>


{% endblock content%}

    

  
108. Goto templates/shop/cart.html,

    -- add {{item.total_cost}} in td just above the Remove

    -- templates/shop/cart.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
Cart | BuySpot
{% endblock title %}

{% block content%}


<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Cart</h4>
                <hr style="border-color: b8bfc2;">
                
            </div>


            <table class="">
                <tr>
                    <th>Image</th>
                    <th>Product Name</th>
                    <th>Unit</th>
                    <th>Quantity</th>
                    <th>Amount</th>
                    <th>Remove</th>
                </tr>
            
            {% for item in cart %}
                <tr>
                    <td><img src="{{ item.product.product_image.url }}" height="75px" width="50px"  alt="{{ item.product.name }}"></td>
                    <td>{{ item.product.name }}</td>
                    <td>{{ item.product.selling_price | stringformat:'d'}}</td>
                    <td>{{ item.product_qty }}</td>
                    <td>{{ item.total_cost }}</td>
                    <td><button class="btn btn-danger btn-sm"><i class="fa fa-trash"></i>Remove</button></td>
                </tr>
            {% endfor %}
        </table>
            
        </div>

    </div>

</section>


{% endblock content%}

        -- remove decimal values from Amount column also.
        <td>{{ item.total_cost | stringformat:'d' }}</td>


109. Add Total amount for all cart products.
    -- goto cart.html file,
    -- add tr tag just above </table> tag.
    -- create td tag with content Total Amount
    <td>Total Amount</td>
    -- create another td tag with id='net'
    -- add class amt for {{total_cost}} td tag.
    <td class="amt">{{ item.total_cost | stringformat:'d' }}</td>
    -- add colspan='5' in id='net' tag. and content 0
    <td id="net" colspan="5">0</td>
    -- add three empty td just above Total Amount td tag
    -- remove colspan='5'
    -- remove 3rd td column
    -- add colspan='2' for Total Amount td column and Make letters bold by using b tag
                <tr>
                <td></td>
                <td></td>
                <td colspan="2"><b>Total Amount</b></td>
                <td id="net">0</td>
            </tr>
            save it.
    -- templates/shop/cart.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
Cart | BuySpot
{% endblock title %}

{% block content%}


<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Cart</h4>
                <hr style="border-color: b8bfc2;">
                
            </div>


            <table class="">
                <tr>
                    <th>Image</th>
                    <th>Product Name</th>
                    <th>Unit</th>
                    <th>Quantity</th>
                    <th>Amount</th>
                    <th>Remove</th>
                </tr>
            
            {% for item in cart %}
                <tr>
                    <td><img src="{{ item.product.product_image.url }}" height="75px" width="50px"  alt="{{ item.product.name }}"></td>
                    <td>{{ item.product.name }}</td>
                    <td>{{ item.product.selling_price | stringformat:'d'}}</td>
                    <td>{{ item.product_qty }}</td>
                    <td class="amt">{{ item.total_cost | stringformat:'d' }}</td>
                    <td><button class="btn btn-danger btn-sm"><i class="fa fa-trash"></i>Remove</button></td>
                </tr>
            {% endfor %}
            <tr>
                <td></td>
                <td></td>
                <td colspan="2"><b>Total Amount</b></td>
                <td id="net">0</td>
            </tr>
        </table>
            
        </div>

    </div>

</section>


{% endblock content%}

    
110. Create one script tag after </section> tag.(not explained properly by tutor)
    -- create variable const nodes using querySelectorAll get the id .amt
    const nodes = document.querySelectorAll('.amt')
    -- create arr variable and store the Array(nodes)
    const arr = Array.from(nodes)
    -- create const arr variable, create function with name reduce and parameter acc,curr
    const res = arr.reduce((acc,curr) => {
        return acc+= Number(curr.textContent)
    },0);
    -- finally get id=net by getElementById and add innerHtml Rs.
    <script>
    const nodes = document.querySelectorAll('.amt')
    const arr = Array.from(nodes)
    const res = arr.reduce((acc,curr) => {
        return acc+= Number(curr.textContent)
    },0);
    document.getElementById('net').innerHTML = "Rs. " + res;
</script>

    save and run the webpage.
    Total Amount of all peoducts displayed Successfully.

   -- templates/shop/cart.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
Cart | BuySpot
{% endblock title %}

{% block content%}


<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Cart</h4>
                <hr style="border-color: b8bfc2;">
                
            </div>


            <table class="">
                <tr>
                    <th>Image</th>
                    <th>Product Name</th>
                    <th>Unit</th>
                    <th>Quantity</th>
                    <th>Amount</th>
                    <th>Remove</th>
                </tr>
            
            {% for item in cart %}
                <tr>
                    <td><img src="{{ item.product.product_image.url }}" height="75px" width="50px"  alt="{{ item.product.name }}"></td>
                    <td>{{ item.product.name }}</td>
                    <td>{{ item.product.selling_price | stringformat:'d'}}</td>
                    <td>{{ item.product_qty }}</td>
                    <td class="amt">{{ item.total_cost | stringformat:'d' }}</td>
                    <td><button class="btn btn-danger btn-sm"><i class="fa fa-trash"></i>Remove</button></td>
                </tr>
            {% endfor %}
            <tr>
                <td></td>
                <td></td>
                <td colspan="2"><b>Total Amount</b></td>
                <td id="net">0</td>
            </tr>
        </table>
            
        </div>

    </div>

</section>

<script>
    const nodes = document.querySelectorAll('.amt')
    const arr = Array.from(nodes)
    const res = arr.reduce((acc,curr) => {
        return acc+= Number(curr.textContent)
    },0);
    document.getElementById('net').innerHTML = "Rs. " + res;
</script>


{% endblock content%}


111. Now, Add functionality to Remove button.

    -- Goto templates/shop/cart.html file,
    -- change this button tag to <a> tag.
    <td><a href="#" class="btn btn-danger btn-sm"><i class="fa fa-trash"></i>Remove</a></td> 
    -- add alert message using Onclick event and content "are you sure to delete.
    <td><a href="#" onclick="return confirm('Are You Sure? To Remove')" class="btn btn-danger btn-sm"><i class="fa fa-trash"></i>Remove</a></td>
    -- save and check alert msg is working or not.
    -- successfully working.
    -- templates/shop/cart.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
Cart | BuySpot
{% endblock title %}

{% block content%}


<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Cart</h4>
                <hr style="border-color: b8bfc2;">
                
            </div>


            <table class="">
                <tr>
                    <th>Image</th>
                    <th>Product Name</th>
                    <th>Unit</th>
                    <th>Quantity</th>
                    <th>Amount</th>
                    <th>Remove</th>
                </tr>
            
            {% for item in cart %}
                <tr>
                    <td><img src="{{ item.product.product_image.url }}" height="75px" width="50px"  alt="{{ item.product.name }}"></td>
                    <td>{{ item.product.name }}</td>
                    <td>{{ item.product.selling_price | stringformat:'d'}}</td>
                    <td>{{ item.product_qty }}</td>
                    <td class="amt">{{ item.total_cost | stringformat:'d' }}</td>
                    <td><a href="#" onclick="return confirm('Are You Sure? To Remove')" class="btn btn-danger btn-sm"><i class="fa fa-trash"></i>Remove</a></td>
                </tr>
            {% endfor %}
            <tr>
                <td></td>
                <td></td>
                <td colspan="2"><b>Total Amount</b></td>
                <td id="net">0</td>
            </tr>
        </table>
            
        </div>

    </div>

</section>

<script>
    const nodes = document.querySelectorAll('.amt')
    const arr = Array.from(nodes)
    const res = arr.reduce((acc,curr) => {
        return acc+= Number(curr.textContent)
    },0);
    document.getElementById('net').innerHTML = "Rs. " + res;
</script>


{% endblock content%}


112. Remove after pressing ok on onclick event alert message:

    -- Goto templates/shop/cart.html file,
    -- replace href='#' in a tag  with ' {% url 'remove_cart' %}'
    <td><a href="{% url remove_cart %}" onclick="return confirm('Are You Sure? To Remove')" class="btn btn-danger btn-sm"><i class="fa fa-trash"></i>Remove</a></td>
    -- we need product item id to delete.
    -- add item.id near "{% url remove_cart %}"
     <td><a href="{% url remove_cart item.id %}" onclick="return confirm('Are You Sure? To Remove')" class="btn btn-danger btn-sm"><i class="fa fa-trash"></i>Remove</a></td>
     
    -- Goto shop/urls.py add path for remove_cart
       path('remove_cart/<str:id>',views.remove_cart, name ='remove_cart'),

    -- Goto views.py and add function with name of remove_cart
    def remove_cart(request,cid):
        cartitem=Cart.objects.get(id=cid)
        cartitem.delete()
        return redirect("/cart")

    everything works fine.

    -- views.py

from django.shortcuts import render, redirect
from shop.models import Category, Product, Cart
from django.contrib import messages
from django.http import HttpResponse,JsonResponse
from shop.form import CustomUserForm
from django.contrib.auth import authenticate,login,logout
import json

# Create your views here.
def home(request):
    products = Product.objects.filter(Trending=1)
    return render(request, 'shop/index.html',{'products': products})

def remove_cart(request,cid):
  cartitem=Cart.objects.get(id=cid)
  cartitem.delete()
  return redirect("/cart")

def cart_page(request):
    if request.user.is_authenticated:
        cart = Cart.objects.filter( user = request.user)
        return render(request, 'shop/cart.html',{'cart': cart})
    else:
        return redirect('home')


def add_to_cart(request):
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        if request.user.is_authenticated:
            try:
                data = json.load(request)
                product_qty = (data['product_qty'])
                product_id = (data['pid'])
                # print(request.user.id)
                product_status = Product.objects.get(id = product_id )
                if product_status:
                    if Cart.objects.filter(user= request.user,product_id = product_id):
                        return JsonResponse({'status': 'Product Already in cart'}, status=200)
                    else:
                        if product_status.quantity>=product_qty:
                            Cart.objects.create(user= request.user,product_id = product_id, product_qty = product_qty)
                            return JsonResponse({'status': 'Product Added to Cart successfully'}, status=200)
                        else:
                            return JsonResponse({'status': 'Product Stock out of Market'}, status=200)

               
            except json.JSONDecodeError:
                return JsonResponse({'status': 'Invalid JSON data'}, status=400)
        else:
            return JsonResponse({'status': 'Log in to Add Cart'}, status=200)
    else:
        return JsonResponse({'status': 'Invalid Access'}, status=200)



def logout_page(request):
    if request.user.is_authenticated:
        logout(request)
        messages.success(request, "Logged Out Successfully")
    return redirect('home')


def login_page(request):
  if request.user.is_authenticated:
    return redirect('home')
  else:
    if request.method=='POST':
      name=request.POST.get('username')
      pwd=request.POST.get('password')
      user=authenticate(request,username=name,password=pwd)
      if user is not None:
        login(request,user)
        messages.success(request,"Logged in Successfully")
        return redirect("/")
      else:
        messages.error(request,"Invalid User Name or Password")
        return redirect("/login")
    return render(request,"shop/login.html")

      
def register(request):
    form = CustomUserForm()
    if request.method == 'POST':
        form = CustomUserForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request,"Registration Success, You can Login Now...!ð")
            return redirect('login')

    return render(request, 'shop/register.html', {'form':form})

def collections(request):
    category = Category.objects.filter(status=0)
    return render(request, 'shop/collections.html', {'category': category})

def collectionsview(request, name):
    if Category.objects.filter(name=name, status=0).exists():
        products = Product.objects.filter(category__name=name)  # Changed to lowercase
        return render(request, 'shop/products/index.html', {'products': products, "category_name":name})
    else:
        messages.warning(request, "No Such Category Found")
        return redirect('collections')

def product_details(request,cname,pname):
    if(Category.objects.filter(name=cname,status=0)):
        if(Product.objects.filter(name=pname,status=0)):
            product = Product.objects.filter(name=pname,status=0).first()
            return render(request,'shop/products/product_details.html',{'product':product})
        else:
            messages.warning(request, "No Such Product")
            return redirect ('collections')
    else:
        messages.warning(request, "No Such Category")
        return redirect ('collections')

   -- urls.py,

"""
URL configuration for Ecomm_Project project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path
from shop import views 

urlpatterns = [
    path('',views.home, name ='home'),
    path('register',views.register, name ='register'),
    path('login',views.login_page, name ='login'),
    path('logout',views.logout_page, name ='logout'),
    path('cart',views.cart_page, name ='cart'),
    path('remove_cart/<str:cid>',views.remove_cart,name="remove_cart"),
    path('collections',views.collections, name ='collections'),
    path('collections/<str:name>',views.collectionsview, name ='collections'),
    path('collections/<str:cname>/<str:pname>',views.product_details, name ='product_details'),
    path('addtocart',views.add_to_cart, name ='addtocart'),
    
]

    -- templates/shop/cart.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
Cart | BuySpot
{% endblock title %}

{% block content%}


<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Cart</h4>
                <hr style="border-color: b8bfc2;">
                
            </div>


            <table class="">
                <tr>
                    <th>Image</th>
                    <th>Product Name</th>
                    <th>Unit</th>
                    <th>Quantity</th>
                    <th>Amount</th>
                    <th>Remove</th>
                </tr>
            
            {% for item in cart %}
                <tr>
                    <td><img src="{{ item.product.product_image.url }}" height="75px" width="50px"  alt="{{ item.product.name }}"></td>
                    <td>{{ item.product.name }}</td>
                    <td>{{ item.product.selling_price | stringformat:'d'}}</td>
                    <td>{{ item.product_qty }}</td>
                    <td class="amt">{{ item.total_cost | stringformat:'d' }}</td>
                    <td><a href="{% url 'remove_cart' item.id %}"  onclick="return confirm('Are you sure? to Remove')"  class="btn btn-danger btn-sm"><i class="fa fa-trash"></i> Remove</a></td>
                </tr>
            {% endfor %}
            <tr>
                <td></td>
                <td></td>
                <td colspan="2"><b>Total Amount</b></td>
                <td id="net">0</td>
            </tr>
        </table>
            
        </div>

    </div>

</section>

<script>
    const nodes = document.querySelectorAll('.amt')
    const arr = Array.from(nodes)
    const res = arr.reduce((acc,curr) => {
        return acc+= Number(curr.textContent)
    },0);
    document.getElementById('net').innerHTML = "Rs. " + res;
</script>


{% endblock content%}

    


113. add favourite page.
    -- Goto inc/navbar.html file,
    -- copy the cart a tag and paste it below with changes of url 'cart' to 'fav', font awesome 'cart' to 'heart' and content 'Cart' to 'Favourite'
    a class="nav-link" href="{% url 'fav' %}"><i class="fa fa-shopping-heart"></i>Favourite</a>
    
    --inc/navbar.html file,



<nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
    <div class="container">
      <a class="navbar-brand" href="{% url 'home' %}"> <i class ="fa fa-cart-plus"></i>BuySpot</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>

      <div class="collapse navbar-collapse" id="navbarNav">
        <div class="navbar-nav ms-auto">
          
          <a class="nav-link" aria-current="page" href="{% url 'home' %}"><i class="fa fa-home"></i>Home</a>

          {% if request.user.is_authenticated %}
            <a class="nav-link" aria-current="page" href="#"><i class="fa fa-user"></i>{{request.user}}</a>
            <a class="nav-link" aria-current="page" href="{% url 'logout' %}"><i class="fa fa-sign-out"></i>Logout</a>

          {% else %}
          
            <a class="nav-link" href="{% url 'login' %}"><i class="fa fa-sign-in"></i>Login</a>
            <a class="nav-link" href="{% url 'register' %}"><i class="fa fa-users"></i>Register</a>

          {% endif %}
            <a class="nav-link" href="{% url 'collections' %}"><i class="fa fa-cubes"></i>Collections</a>
            <a class="nav-link" href="{% url 'cart' %}"><i class="fa fa-shopping-cart"></i>Cart</a>
            <a class="nav-link" href="{% url 'fav' %}"><i class="fa fa-shopping-heart"></i>Favourite</a>


        </div>
      </div>
    </div>
  </nav>


  114. Add Urls for favourite page on shop/urls.py,
    -- goto shop/urls.py and add path
    path('fav',views.fav_page, name ='fav'),

    -- next goto views.py file,
    -- craete function with the name of  fav_page.
    def fav_page(request):
        pass
    -- next copy and paste add_to_page function  content and paste it on fav_page function.

    -- views.py file,

from django.shortcuts import render, redirect
from shop.models import Category, Product, Cart
from django.contrib import messages
from django.http import HttpResponse,JsonResponse
from shop.form import CustomUserForm
from django.contrib.auth import authenticate,login,logout
import json

# Create your views here.
def home(request):
    products = Product.objects.filter(Trending=1)
    return render(request, 'shop/index.html',{'products': products})

def fav_page(request):
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        if request.user.is_authenticated:
            try:
                data = json.load(request)
                product_qty = (data['product_qty'])
                product_id = (data['pid'])
                # print(request.user.id)
                product_status = Product.objects.get(id = product_id )
                if product_status:
                    if Cart.objects.filter(user= request.user,product_id = product_id):
                        return JsonResponse({'status': 'Product Already in cart'}, status=200)
                    else:
                        if product_status.quantity>=product_qty:
                            Cart.objects.create(user= request.user,product_id = product_id, product_qty = product_qty)
                            return JsonResponse({'status': 'Product Added to Cart successfully'}, status=200)
                        else:
                            return JsonResponse({'status': 'Product Stock out of Market'}, status=200)

               
            except json.JSONDecodeError:
                return JsonResponse({'status': 'Invalid JSON data'}, status=400)
        else:
            return JsonResponse({'status': 'Log in to Add Cart'}, status=200)
    else:
        return JsonResponse({'status': 'Invalid Access'}, status=200)

def remove_cart(request,cid):
  cartitem=Cart.objects.get(id=cid)
  cartitem.delete()
  return redirect("/cart")

def cart_page(request):
    if request.user.is_authenticated:
        cart = Cart.objects.filter( user = request.user)
        return render(request, 'shop/cart.html',{'cart': cart})
    else:
        return redirect('home')


def add_to_cart(request):
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        if request.user.is_authenticated:
            try:
                data = json.load(request)
                product_qty = (data['product_qty'])
                product_id = (data['pid'])
                # print(request.user.id)
                product_status = Product.objects.get(id = product_id )
                if product_status:
                    if Cart.objects.filter(user= request.user,product_id = product_id):
                        return JsonResponse({'status': 'Product Already in cart'}, status=200)
                    else:
                        if product_status.quantity>=product_qty:
                            Cart.objects.create(user= request.user,product_id = product_id, product_qty = product_qty)
                            return JsonResponse({'status': 'Product Added to Cart successfully'}, status=200)
                        else:
                            return JsonResponse({'status': 'Product Stock out of Market'}, status=200)

               
            except json.JSONDecodeError:
                return JsonResponse({'status': 'Invalid JSON data'}, status=400)
        else:
            return JsonResponse({'status': 'Log in to Add Cart'}, status=200)
    else:
        return JsonResponse({'status': 'Invalid Access'}, status=200)



def logout_page(request):
    if request.user.is_authenticated:
        logout(request)
        messages.success(request, "Logged Out Successfully")
    return redirect('home')


def login_page(request):
  if request.user.is_authenticated:
    return redirect('home')
  else:
    if request.method=='POST':
      name=request.POST.get('username')
      pwd=request.POST.get('password')
      user=authenticate(request,username=name,password=pwd)
      if user is not None:
        login(request,user)
        messages.success(request,"Logged in Successfully")
        return redirect("/")
      else:
        messages.error(request,"Invalid User Name or Password")
        return redirect("/login")
    return render(request,"shop/login.html")

      
def register(request):
    form = CustomUserForm()
    if request.method == 'POST':
        form = CustomUserForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request,"Registration Success, You can Login Now...!ð")
            return redirect('login')

    return render(request, 'shop/register.html', {'form':form})

def collections(request):
    category = Category.objects.filter(status=0)
    return render(request, 'shop/collections.html', {'category': category})

def collectionsview(request, name):
    if Category.objects.filter(name=name, status=0).exists():
        products = Product.objects.filter(category__name=name)  # Changed to lowercase
        return render(request, 'shop/products/index.html', {'products': products, "category_name":name})
    else:
        messages.warning(request, "No Such Category Found")
        return redirect('collections')

def product_details(request,cname,pname):
    if(Category.objects.filter(name=cname,status=0)):
        if(Product.objects.filter(name=pname,status=0)):
            product = Product.objects.filter(name=pname,status=0).first()
            return render(request,'shop/products/product_details.html',{'product':product})
        else:
            messages.warning(request, "No Such Product")
            return redirect ('collections')
    else:
        messages.warning(request, "No Such Category")
        return redirect ('collections')

115. Goto product_details.html file.
    -- add id="btnFav" to button having class "btn btn-danger".
    <button class="btn btn-danger" id="btnFav" ><i class="fa fa-heart"></i></button>
    -- get that "btnFav" in script tag using getElementById and store it on const btnFav variable.
     const btnFav = document.getElementById("btnFav");
    -- next, copy the btnCart addEventListener and paste it below.
    -- change btnCart to btnFav.
    -- create one table on model
    -- goto models.py and create one calss with name Favourite.
    -- create user variable and assign it as ForeignKey.
    -- create product variable and assign it as ForeignKey.
    -- reate created_at variable and store current DateTimeField.
    class Favourite(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    --  py manage.py makemigrations
    --  py manage.py migrate
    -- next, continue on btnFav addEventListener,
    -- remove all conditions and qty.
    -- pid is enough
            btnFav.addEventListener("click", function() {
     
        let postObj = { 
         'pid': pid.value
        }
        console.log(postObj);
        fetch("/fav",{
        method: 'POST',
        credentials: 'same-origin',
        headers:{
           'Accept': 'application/json',
           'X-Requested-With': 'XMLHttpRequest',
           'X-CSRFToken': '{{ csrf_token }}',
       },
       body: JSON.stringify(postObj)
     }).then(response => {
         return response.json();
     }).then(data => {
         //console.log(data);
       alert(data['status']);
     });
   
});

116. Goto Views.py
    -- remove product_qty = (data['product_qty']).
    -- select def fav_page(request): 
    -- copy this, Cart.objects.create(user= request.user,product_id = product_id, product_qty = product_qty).
    and paste on just below product_id variable
    -- remove following,
    product_status = Product.objects.get(id = product_id )
                if product_status:
                    if Cart.objects.filter(user= request.user,product_id = product_id):
                        return JsonResponse({'status': 'Product Already in cart'}, status=200)
                    else:
                        if product_status.quantity>=product_qty:
                            Cart.objects.create(user= request.user,product_id = product_id, product_qty = product_qty)
                            return JsonResponse({'status': 'Product Added to Cart successfully'}, status=200)
                        else:
                            return JsonResponse({'status': 'Product Stock out of Market'}, status=200)
    -- in else part replace change 'status': 'Log in to Add Cart' to 'status': 'Log in to Add Favourite'
    return JsonResponse({'status': 'Log in to Add Cart'}, status=200)
    -- remove product_qty = product_qty from this line , Cart.objects.create(user= request.user,product_id = product_id, product_qty = product_qty)
    -- change Cart to Favourite.
    Favourite.objects.create(user= request.user,product_id = product_id)
    -- just below of Favourite.objects.create(user= request.user,product_id = product_id) line, add one json respose.
    return JsonResponse({'status': 'Product Added to Favourite'}, status=200)

    
def fav_page(request):
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        if request.user.is_authenticated:
            try:
                data = json.load(request)
                product_qty = (data['product_qty'])
                product_id = (data['pid'])
                # print(request.user.id)
                Favourite.objects.create(user= request.user,product_id = product_id)
                return JsonResponse({'status': 'Product Added to Favourite'}, status=200)
                

               
            except json.JSONDecodeError:
                return JsonResponse({'status': 'Invalid JSON data'}, status=400)
        else:
            return JsonResponse({'status': 'Log in to Add Cart'}, status=200)
    else:
        return JsonResponse({'status': 'Invalid Access'}, status=200)

117. Now we can add product after checking that, the product is already available or not in Favourite,
    -- in def fav_page(request): function, below of product_id, add product_status variable.
    product_status = Product.objects.get(id = product_id )
    -- if product_status: (if product available in shop)
    -- if Favourite.objects.filter(user= request.user,product_id = product_id): (if that product already exists in Favourite)
    -- return JsonResponse({'status': 'Product Already in Favourite'}, status=200)
    -- else:
            Favourite.objects.create(user= request.user,product_id = product_id)
            return JsonResponse({'status': 'Product Added to Favourite'}, status=200)

def fav_page(request):
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        if request.user.is_authenticated:
            try:
                data = json.load(request)
                product_qty = (data['product_qty'])
                product_id = (data['pid'])
                # print(request.user.id)
                product_status = Product.objects.get(id = product_id )
                if product_status:
                    if Favourite.objects.filter(user= request.user,product_id = product_id):
                        return JsonResponse({'status': 'Product Already in Favourite'}, status=200)
                    else:
                        Favourite.objects.create(user= request.user,product_id = product_id)
                        return JsonResponse({'status': 'Product Added to Favourite'}, status=200)
                         
            except json.JSONDecodeError:
                return JsonResponse({'status': 'Invalid JSON data'}, status=400)
        else:
            return JsonResponse({'status': 'Log in to Add Favourite'}, status=200)
    else:
        return JsonResponse({'status': 'Invalid Access'}, status=200)


-- Everything working on console perfectly.


118. next, create one .html file to view Favourite.
    -- goto shop/urls.py file and add one path for favviewpage.
    path('favviewpage',views.favviewpage, name ='favviewpage'),
    -- next create one view for favviewpage.
    -- goto views.py and create one fubction with name favviewpage
    -- copy the cart_page function and paste it.
    -- change function name cart_page to favviewpage.
    -- replace cart by equivalent fav.
def cart_page(request):
    if request.user.is_authenticated:
        fav = Favourite.objects.filter( user = request.user)
        return render(request, 'shop/fav.html',{'fav': fav})
    else:
        return redirect('home')

        -- next, create fav.html file on templates/shop/ folder.
        -- copy the content from cart.html and paste it on fav.html 
        -- in fav.html, remove script tag content completely.
        -- remove Total Amount tr tag content. which below {% endfor %}
        -- remove <td>{{ item.product_qty }}</td>
        -- remove <td class="amt">{{ item.total_cost | stringformat:'d' }}</td>
        -- replace cart by fav in loop
        {% for item in fav %}

-- fav.html file,

{% extends 'shop/layouts/main.html' %}

{% block title %}
Cart | BuySpot
{% endblock title %}

{% block content%}


<section class="bg-light py-4 my-5" style="min-height: 600px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h4 class="mb-3">Favourite</h4>
                <hr style="border-color: b8bfc2;">
                
            </div>


            <table class="">
                <tr>
                    <th>Image</th>
                    <th>Product Name</th>
                    <th>Unit</th>
                    <th>Quantity</th>
                    <th>Amount</th>
                    <th>Remove</th>
                </tr>
            
            {% for item in fav %}
                <tr>
                    <td><img src="{{ item.product.product_image.url }}" height="75px" width="50px"  alt="{{ item.product.name }}"></td>
                    <td>{{ item.product.name }}</td>
                    <td>{{ item.product.selling_price | stringformat:'d'}}</td>
                    
                    
                    <td><a href="{% url 'remove_cart' item.id %}"  onclick="return confirm('Are you sure? to Remove')"  class="btn btn-danger btn-sm"><i class="fa fa-trash"></i> Remove</a></td>
                </tr>
            {% endfor %}
            
        
        </table>
            
        </div>

    </div>

</section>



{% endblock content%}

    

119. Next goto inc/navbar.html page.
    -- change "{% url 'fav' %}" to "{% url 'favviewpage' %}"
    <a class="nav-link" href="{% url 'favviewpage' %}"><i class="fa fa-heart"></i> Favourite</a>
    -- goto fav.html remove <th>Quantity</th> and <th>Amount</th>
    -- next, change remove_cart to remove_fav in a tag href at fav.html file.
    <td><a href="{% url 'remove_fav' item.id %}"  onclick="return confirm('Are you sure? to Remove')"  class="btn btn-danger btn-sm"><i class="fa fa-trash"></i> Remove</a></td>
    -- goto shop/urls.py and create one path for remove_fav
    ath('remove_fav/<str:cid>',views.remove_fav,name="remove_fav"),
    -- goto views.py and create one function with name remove_fav
    -- copy remove_cart function and paste it.

def remove_fav(request,cid):
  item = Favourite.objects.get(id=cid)
  item.delete()
  return redirect("favviewpage")


                    






    






        




      

   






  





                            
                        






   



           




      


 

